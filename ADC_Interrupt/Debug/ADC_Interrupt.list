
ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ec  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080043ac  080043ac  000053ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800444c  0800444c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800444c  0800444c  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800444c  0800444c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800444c  0800444c  0000544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004450  08004450  00005450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004454  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  080044bc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080044bc  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e790  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b4  00000000  00000000  00014820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00016cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9e  00000000  00000000  00017a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012af5  00000000  00000000  0001851e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001175e  00000000  00000000  0002b013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d968  00000000  00000000  0003c771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa0d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003798  00000000  00000000  000aa11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ad8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004394 	.word	0x08004394

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004394 	.word	0x08004394

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	0018      	movs	r0, r3
 800023e:	230c      	movs	r3, #12
 8000240:	001a      	movs	r2, r3
 8000242:	2100      	movs	r1, #0
 8000244:	f003 fb06 	bl	8003854 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000248:	4b25      	ldr	r3, [pc, #148]	@ (80002e0 <MX_ADC_Init+0xac>)
 800024a:	4a26      	ldr	r2, [pc, #152]	@ (80002e4 <MX_ADC_Init+0xb0>)
 800024c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800024e:	4b24      	ldr	r3, [pc, #144]	@ (80002e0 <MX_ADC_Init+0xac>)
 8000250:	2200      	movs	r2, #0
 8000252:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000254:	4b22      	ldr	r3, [pc, #136]	@ (80002e0 <MX_ADC_Init+0xac>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025a:	4b21      	ldr	r3, [pc, #132]	@ (80002e0 <MX_ADC_Init+0xac>)
 800025c:	2200      	movs	r2, #0
 800025e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000260:	4b1f      	ldr	r3, [pc, #124]	@ (80002e0 <MX_ADC_Init+0xac>)
 8000262:	2201      	movs	r2, #1
 8000264:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000266:	4b1e      	ldr	r3, [pc, #120]	@ (80002e0 <MX_ADC_Init+0xac>)
 8000268:	2204      	movs	r2, #4
 800026a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800026c:	4b1c      	ldr	r3, [pc, #112]	@ (80002e0 <MX_ADC_Init+0xac>)
 800026e:	2200      	movs	r2, #0
 8000270:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000272:	4b1b      	ldr	r3, [pc, #108]	@ (80002e0 <MX_ADC_Init+0xac>)
 8000274:	2200      	movs	r2, #0
 8000276:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000278:	4b19      	ldr	r3, [pc, #100]	@ (80002e0 <MX_ADC_Init+0xac>)
 800027a:	2200      	movs	r2, #0
 800027c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800027e:	4b18      	ldr	r3, [pc, #96]	@ (80002e0 <MX_ADC_Init+0xac>)
 8000280:	2200      	movs	r2, #0
 8000282:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000284:	4b16      	ldr	r3, [pc, #88]	@ (80002e0 <MX_ADC_Init+0xac>)
 8000286:	22c0      	movs	r2, #192	@ 0xc0
 8000288:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800028a:	4b15      	ldr	r3, [pc, #84]	@ (80002e0 <MX_ADC_Init+0xac>)
 800028c:	2280      	movs	r2, #128	@ 0x80
 800028e:	00d2      	lsls	r2, r2, #3
 8000290:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000292:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <MX_ADC_Init+0xac>)
 8000294:	2224      	movs	r2, #36	@ 0x24
 8000296:	2100      	movs	r1, #0
 8000298:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800029a:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <MX_ADC_Init+0xac>)
 800029c:	2201      	movs	r2, #1
 800029e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002a0:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <MX_ADC_Init+0xac>)
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fc56 	bl	8000b54 <HAL_ADC_Init>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80002ac:	f000 f9c3 	bl	8000636 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2280      	movs	r2, #128	@ 0x80
 80002ba:	0152      	lsls	r2, r2, #5
 80002bc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2203      	movs	r2, #3
 80002c2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c4:	1d3a      	adds	r2, r7, #4
 80002c6:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <MX_ADC_Init+0xac>)
 80002c8:	0011      	movs	r1, r2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fefe 	bl	80010cc <HAL_ADC_ConfigChannel>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80002d4:	f000 f9af 	bl	8000636 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80002d8:	46c0      	nop			@ (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b004      	add	sp, #16
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000084 	.word	0x20000084
 80002e4:	40012400 	.word	0x40012400

080002e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b08b      	sub	sp, #44	@ 0x2c
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f0:	2414      	movs	r4, #20
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	0018      	movs	r0, r3
 80002f6:	2314      	movs	r3, #20
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f003 faaa 	bl	8003854 <memset>
  if(adcHandle->Instance==ADC1)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a1d      	ldr	r2, [pc, #116]	@ (800037c <HAL_ADC_MspInit+0x94>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d133      	bne.n	8000372 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800030a:	4b1d      	ldr	r3, [pc, #116]	@ (8000380 <HAL_ADC_MspInit+0x98>)
 800030c:	699a      	ldr	r2, [r3, #24]
 800030e:	4b1c      	ldr	r3, [pc, #112]	@ (8000380 <HAL_ADC_MspInit+0x98>)
 8000310:	2180      	movs	r1, #128	@ 0x80
 8000312:	0089      	lsls	r1, r1, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	619a      	str	r2, [r3, #24]
 8000318:	4b19      	ldr	r3, [pc, #100]	@ (8000380 <HAL_ADC_MspInit+0x98>)
 800031a:	699a      	ldr	r2, [r3, #24]
 800031c:	2380      	movs	r3, #128	@ 0x80
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	4013      	ands	r3, r2
 8000322:	613b      	str	r3, [r7, #16]
 8000324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	4b16      	ldr	r3, [pc, #88]	@ (8000380 <HAL_ADC_MspInit+0x98>)
 8000328:	695a      	ldr	r2, [r3, #20]
 800032a:	4b15      	ldr	r3, [pc, #84]	@ (8000380 <HAL_ADC_MspInit+0x98>)
 800032c:	2180      	movs	r1, #128	@ 0x80
 800032e:	0289      	lsls	r1, r1, #10
 8000330:	430a      	orrs	r2, r1
 8000332:	615a      	str	r2, [r3, #20]
 8000334:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <HAL_ADC_MspInit+0x98>)
 8000336:	695a      	ldr	r2, [r3, #20]
 8000338:	2380      	movs	r3, #128	@ 0x80
 800033a:	029b      	lsls	r3, r3, #10
 800033c:	4013      	ands	r3, r2
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000342:	193b      	adds	r3, r7, r4
 8000344:	2201      	movs	r2, #1
 8000346:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000348:	193b      	adds	r3, r7, r4
 800034a:	2203      	movs	r2, #3
 800034c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	193b      	adds	r3, r7, r4
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000354:	193a      	adds	r2, r7, r4
 8000356:	2390      	movs	r3, #144	@ 0x90
 8000358:	05db      	lsls	r3, r3, #23
 800035a:	0011      	movs	r1, r2
 800035c:	0018      	movs	r0, r3
 800035e:	f001 f9cb 	bl	80016f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2100      	movs	r1, #0
 8000366:	200c      	movs	r0, #12
 8000368:	f001 f994 	bl	8001694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800036c:	200c      	movs	r0, #12
 800036e:	f001 f9a6 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b00b      	add	sp, #44	@ 0x2c
 8000378:	bd90      	pop	{r4, r7, pc}
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	40012400 	.word	0x40012400
 8000380:	40021000 	.word	0x40021000

08000384 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b089      	sub	sp, #36	@ 0x24
 8000388:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	240c      	movs	r4, #12
 800038c:	193b      	adds	r3, r7, r4
 800038e:	0018      	movs	r0, r3
 8000390:	2314      	movs	r3, #20
 8000392:	001a      	movs	r2, r3
 8000394:	2100      	movs	r1, #0
 8000396:	f003 fa5d 	bl	8003854 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039a:	4b2d      	ldr	r3, [pc, #180]	@ (8000450 <MX_GPIO_Init+0xcc>)
 800039c:	695a      	ldr	r2, [r3, #20]
 800039e:	4b2c      	ldr	r3, [pc, #176]	@ (8000450 <MX_GPIO_Init+0xcc>)
 80003a0:	2180      	movs	r1, #128	@ 0x80
 80003a2:	0309      	lsls	r1, r1, #12
 80003a4:	430a      	orrs	r2, r1
 80003a6:	615a      	str	r2, [r3, #20]
 80003a8:	4b29      	ldr	r3, [pc, #164]	@ (8000450 <MX_GPIO_Init+0xcc>)
 80003aa:	695a      	ldr	r2, [r3, #20]
 80003ac:	2380      	movs	r3, #128	@ 0x80
 80003ae:	031b      	lsls	r3, r3, #12
 80003b0:	4013      	ands	r3, r2
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003b6:	4b26      	ldr	r3, [pc, #152]	@ (8000450 <MX_GPIO_Init+0xcc>)
 80003b8:	695a      	ldr	r2, [r3, #20]
 80003ba:	4b25      	ldr	r3, [pc, #148]	@ (8000450 <MX_GPIO_Init+0xcc>)
 80003bc:	2180      	movs	r1, #128	@ 0x80
 80003be:	03c9      	lsls	r1, r1, #15
 80003c0:	430a      	orrs	r2, r1
 80003c2:	615a      	str	r2, [r3, #20]
 80003c4:	4b22      	ldr	r3, [pc, #136]	@ (8000450 <MX_GPIO_Init+0xcc>)
 80003c6:	695a      	ldr	r2, [r3, #20]
 80003c8:	2380      	movs	r3, #128	@ 0x80
 80003ca:	03db      	lsls	r3, r3, #15
 80003cc:	4013      	ands	r3, r2
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <MX_GPIO_Init+0xcc>)
 80003d4:	695a      	ldr	r2, [r3, #20]
 80003d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000450 <MX_GPIO_Init+0xcc>)
 80003d8:	2180      	movs	r1, #128	@ 0x80
 80003da:	0289      	lsls	r1, r1, #10
 80003dc:	430a      	orrs	r2, r1
 80003de:	615a      	str	r2, [r3, #20]
 80003e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000450 <MX_GPIO_Init+0xcc>)
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	2380      	movs	r3, #128	@ 0x80
 80003e6:	029b      	lsls	r3, r3, #10
 80003e8:	4013      	ands	r3, r2
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ee:	2390      	movs	r3, #144	@ 0x90
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	2200      	movs	r2, #0
 80003f4:	2120      	movs	r1, #32
 80003f6:	0018      	movs	r0, r3
 80003f8:	f001 faee 	bl	80019d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	2280      	movs	r2, #128	@ 0x80
 8000400:	0192      	lsls	r2, r2, #6
 8000402:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000404:	193b      	adds	r3, r7, r4
 8000406:	2284      	movs	r2, #132	@ 0x84
 8000408:	0392      	lsls	r2, r2, #14
 800040a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000412:	193b      	adds	r3, r7, r4
 8000414:	4a0f      	ldr	r2, [pc, #60]	@ (8000454 <MX_GPIO_Init+0xd0>)
 8000416:	0019      	movs	r1, r3
 8000418:	0010      	movs	r0, r2
 800041a:	f001 f96d 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800041e:	0021      	movs	r1, r4
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2220      	movs	r2, #32
 8000424:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2201      	movs	r2, #1
 800042a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000438:	187a      	adds	r2, r7, r1
 800043a:	2390      	movs	r3, #144	@ 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	0011      	movs	r1, r2
 8000440:	0018      	movs	r0, r3
 8000442:	f001 f959 	bl	80016f8 <HAL_GPIO_Init>

}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b009      	add	sp, #36	@ 0x24
 800044c:	bd90      	pop	{r4, r7, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	40021000 	.word	0x40021000
 8000454:	48000800 	.word	0x48000800

08000458 <_write>:
uint16_t timer3_seconds_counter = 0;
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int _write(int file, char *ptr, int len)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	b29a      	uxth	r2, r3
 8000468:	2301      	movs	r3, #1
 800046a:	425b      	negs	r3, r3
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	4804      	ldr	r0, [pc, #16]	@ (8000480 <_write+0x28>)
 8000470:	f002 fba8 	bl	8002bc4 <HAL_UART_Transmit>
	return len;
 8000474:	687b      	ldr	r3, [r7, #4]
}
 8000476:	0018      	movs	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	b004      	add	sp, #16
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	20000114 	.word	0x20000114

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 fadb 	bl	8000a44 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f881 	bl	8000594 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f7ff ff77 	bl	8000384 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000496:	f000 fa2f 	bl	80008f8 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800049a:	f7ff fecb 	bl	8000234 <MX_ADC_Init>
  MX_TIM3_Init();
 800049e:	f000 f9ad 	bl	80007fc <MX_TIM3_Init>
  /* Start TIM3 Base */
   HAL_TIM_Base_Start_IT(&htim3);
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <main+0x68>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 ff85 	bl	80023b4 <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80004aa:	2101      	movs	r1, #1
 80004ac:	2000      	movs	r0, #0
 80004ae:	f001 fab1 	bl	8001a14 <HAL_PWR_EnterSLEEPMode>
	  //blink in-built LED upon wakeup of cpu from sleep
	  for (int i=0; i<5; i++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	e015      	b.n	80004e4 <main+0x60>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);   // LED ON
 80004b8:	2390      	movs	r3, #144	@ 0x90
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2201      	movs	r2, #1
 80004be:	2120      	movs	r1, #32
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fa89 	bl	80019d8 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80004c6:	23fa      	movs	r3, #250	@ 0xfa
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fb1e 	bl	8000b0c <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // LED OFF
 80004d0:	2390      	movs	r3, #144	@ 0x90
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2200      	movs	r2, #0
 80004d6:	2120      	movs	r1, #32
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fa7d 	bl	80019d8 <HAL_GPIO_WritePin>
	  for (int i=0; i<5; i++)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	dde6      	ble.n	80004b8 <main+0x34>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80004ea:	e7de      	b.n	80004aa <main+0x26>
 80004ec:	200000cc 	.word	0x200000cc

080004f0 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END 3 */
}

//HAL callback of an ADC conversion (in interrupt mode) is complete.
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <HAL_ADC_ConvCpltCallback+0x44>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d113      	bne.n	800052a <HAL_ADC_ConvCpltCallback+0x3a>
  {
	  mositure_value = HAL_ADC_GetValue(hadc);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fd21 	bl	8000f4c <HAL_ADC_GetValue>
 800050a:	0003      	movs	r3, r0
 800050c:	b29a      	uxth	r2, r3
 800050e:	4b0a      	ldr	r3, [pc, #40]	@ (8000538 <HAL_ADC_ConvCpltCallback+0x48>)
 8000510:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop_IT(hadc);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fccf 	bl	8000eb8 <HAL_ADC_Stop_IT>
    // Handle moisture value
    printf("ADC value: %d\n", mositure_value);
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <HAL_ADC_ConvCpltCallback+0x48>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	001a      	movs	r2, r3
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f003 f839 	bl	800359c <iprintf>
  }
}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	40012400 	.word	0x40012400
 8000538:	200000c4 	.word	0x200000c4
 800053c:	080043ac 	.word	0x080043ac

08000540 <HAL_TIM_PeriodElapsedCallback>:

// you want to perform some action periodically — every time the timer reaches its period (ARR).
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a0d      	ldr	r2, [pc, #52]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d114      	bne.n	800057c <HAL_TIM_PeriodElapsedCallback+0x3c>
  {
    timer3_seconds_counter++;
 8000552:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b29a      	uxth	r2, r3
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800055c:	801a      	strh	r2, [r3, #0]

    if (timer3_seconds_counter >= 60)
 800055e:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b3b      	cmp	r3, #59	@ 0x3b
 8000564:	d90a      	bls.n	800057c <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
      timer3_seconds_counter = 0;
 8000566:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000568:	2200      	movs	r2, #0
 800056a:	801a      	strh	r2, [r3, #0]
      printf("1min completed....\nStart of ADC....\n");
 800056c:	4b07      	ldr	r3, [pc, #28]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800056e:	0018      	movs	r0, r3
 8000570:	f003 f87a 	bl	8003668 <puts>
      HAL_ADC_Start_IT(&hadc);
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fc2c 	bl	8000dd4 <HAL_ADC_Start_IT>
    }
  }
}
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40000400 	.word	0x40000400
 8000588:	200000c6 	.word	0x200000c6
 800058c:	080043bc 	.word	0x080043bc
 8000590:	20000084 	.word	0x20000084

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b091      	sub	sp, #68	@ 0x44
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	2410      	movs	r4, #16
 800059c:	193b      	adds	r3, r7, r4
 800059e:	0018      	movs	r0, r3
 80005a0:	2330      	movs	r3, #48	@ 0x30
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f003 f955 	bl	8003854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005aa:	003b      	movs	r3, r7
 80005ac:	0018      	movs	r0, r3
 80005ae:	2310      	movs	r3, #16
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f003 f94e 	bl	8003854 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80005b8:	0021      	movs	r1, r4
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2212      	movs	r2, #18
 80005be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2201      	movs	r2, #1
 80005c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2201      	movs	r2, #1
 80005ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2210      	movs	r2, #16
 80005d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2210      	movs	r2, #16
 80005d6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2202      	movs	r2, #2
 80005dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	0212      	lsls	r2, r2, #8
 80005e4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2280      	movs	r2, #128	@ 0x80
 80005ea:	0352      	lsls	r2, r2, #13
 80005ec:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fa28 	bl	8001a4c <HAL_RCC_OscConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000600:	f000 f819 	bl	8000636 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	003b      	movs	r3, r7
 8000606:	2207      	movs	r2, #7
 8000608:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	003b      	movs	r3, r7
 800060c:	2202      	movs	r2, #2
 800060e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	003b      	movs	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	003b      	movs	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061c:	003b      	movs	r3, r7
 800061e:	2101      	movs	r1, #1
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fd31 	bl	8002088 <HAL_RCC_ClockConfig>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800062a:	f000 f804 	bl	8000636 <Error_Handler>
  }
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b011      	add	sp, #68	@ 0x44
 8000634:	bd90      	pop	{r4, r7, pc}

08000636 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063a:	b672      	cpsid	i
}
 800063c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	e7fd      	b.n	800063e <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <HAL_MspInit+0x44>)
 800064c:	699a      	ldr	r2, [r3, #24]
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <HAL_MspInit+0x44>)
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	619a      	str	r2, [r3, #24]
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <HAL_MspInit+0x44>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	2201      	movs	r2, #1
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <HAL_MspInit+0x44>)
 8000664:	69da      	ldr	r2, [r3, #28]
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <HAL_MspInit+0x44>)
 8000668:	2180      	movs	r1, #128	@ 0x80
 800066a:	0549      	lsls	r1, r1, #21
 800066c:	430a      	orrs	r2, r1
 800066e:	61da      	str	r2, [r3, #28]
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <HAL_MspInit+0x44>)
 8000672:	69da      	ldr	r2, [r3, #28]
 8000674:	2380      	movs	r3, #128	@ 0x80
 8000676:	055b      	lsls	r3, r3, #21
 8000678:	4013      	ands	r3, r2
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	e7fd      	b.n	8000690 <NMI_Handler+0x4>

08000694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	e7fd      	b.n	8000698 <HardFault_Handler+0x4>

0800069c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 fa0e 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <ADC1_IRQHandler+0x14>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fc4c 	bl	8000f64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	20000084 	.word	0x20000084

080006d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
//	printf("calling TIM IRQ handler....\n");
	HAL_TIM_IRQHandler(&htim3);  // HAL clears flag and calls callback
 80006dc:	4b03      	ldr	r3, [pc, #12]	@ (80006ec <TIM3_IRQHandler+0x14>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 feb4 	bl	800244c <HAL_TIM_IRQHandler>
}
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	200000cc 	.word	0x200000cc

080006f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e00a      	b.n	8000718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000702:	e000      	b.n	8000706 <_read+0x16>
 8000704:	bf00      	nop
 8000706:	0001      	movs	r1, r0
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	60ba      	str	r2, [r7, #8]
 800070e:	b2ca      	uxtb	r2, r1
 8000710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3301      	adds	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697a      	ldr	r2, [r7, #20]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	429a      	cmp	r2, r3
 800071e:	dbf0      	blt.n	8000702 <_read+0x12>
  }

  return len;
 8000720:	687b      	ldr	r3, [r7, #4]
}
 8000722:	0018      	movs	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	b006      	add	sp, #24
 8000728:	bd80      	pop	{r7, pc}

0800072a <_close>:
  }
  return len;
}

int _close(int file)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000732:	2301      	movs	r3, #1
 8000734:	425b      	negs	r3, r3
}
 8000736:	0018      	movs	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}

0800073e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	0192      	lsls	r2, r2, #6
 800074e:	605a      	str	r2, [r3, #4]
  return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	0018      	movs	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	b002      	add	sp, #8
 8000758:	bd80      	pop	{r7, pc}

0800075a <_isatty>:

int _isatty(int file)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000762:	2301      	movs	r3, #1
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}

0800076c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000778:	2300      	movs	r3, #0
}
 800077a:	0018      	movs	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	b004      	add	sp, #16
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	18d3      	adds	r3, r2, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f003 f8a4 	bl	8003900 <__errno>
 80007b8:	0003      	movs	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	2301      	movs	r3, #1
 80007c0:	425b      	negs	r3, r3
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	18d2      	adds	r2, r2, r3
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <_sbrk+0x64>)
 80007d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b006      	add	sp, #24
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20004000 	.word	0x20004000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	200000c8 	.word	0x200000c8
 80007ec:	200002f0 	.word	0x200002f0

080007f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	2308      	movs	r3, #8
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	0018      	movs	r0, r3
 8000808:	2310      	movs	r3, #16
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f003 f821 	bl	8003854 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	003b      	movs	r3, r7
 8000814:	0018      	movs	r0, r3
 8000816:	2308      	movs	r3, #8
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f003 f81a 	bl	8003854 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000822:	4a1f      	ldr	r2, [pc, #124]	@ (80008a0 <MX_TIM3_Init+0xa4>)
 8000824:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000828:	4a1e      	ldr	r2, [pc, #120]	@ (80008a4 <MX_TIM3_Init+0xa8>)
 800082a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_TIM3_Init+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000834:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <MX_TIM3_Init+0xac>)
 8000836:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_TIM3_Init+0xa0>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000846:	0018      	movs	r0, r3
 8000848:	f001 fd64 	bl	8002314 <HAL_TIM_Base_Init>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000850:	f7ff fef1 	bl	8000636 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	2108      	movs	r1, #8
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2280      	movs	r2, #128	@ 0x80
 800085a:	0152      	lsls	r2, r2, #5
 800085c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085e:	187a      	adds	r2, r7, r1
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 fedf 	bl	8002628 <HAL_TIM_ConfigClockSource>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800086e:	f7ff fee2 	bl	8000636 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000872:	003b      	movs	r3, r7
 8000874:	2220      	movs	r2, #32
 8000876:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	003b      	movs	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800087e:	003a      	movs	r2, r7
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f002 f8e1 	bl	8002a4c <HAL_TIMEx_MasterConfigSynchronization>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800088e:	f7ff fed2 	bl	8000636 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b006      	add	sp, #24
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	200000cc 	.word	0x200000cc
 80008a0:	40000400 	.word	0x40000400
 80008a4:	0000bb7f 	.word	0x0000bb7f
 80008a8:	000003e7 	.word	0x000003e7

080008ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <HAL_TIM_Base_MspInit+0x44>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d113      	bne.n	80008e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008c0:	69da      	ldr	r2, [r3, #28]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008c4:	2102      	movs	r1, #2
 80008c6:	430a      	orrs	r2, r1
 80008c8:	61da      	str	r2, [r3, #28]
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	2202      	movs	r2, #2
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2010      	movs	r0, #16
 80008dc:	f000 feda 	bl	8001694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008e0:	2010      	movs	r0, #16
 80008e2:	f000 feec 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b004      	add	sp, #16
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	40000400 	.word	0x40000400
 80008f4:	40021000 	.word	0x40021000

080008f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <MX_USART2_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000904:	22e1      	movs	r2, #225	@ 0xe1
 8000906:	0252      	lsls	r2, r2, #9
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800093c:	0018      	movs	r0, r3
 800093e:	f002 f8ed 	bl	8002b1c <HAL_UART_Init>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f7ff fe76 	bl	8000636 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000114 	.word	0x20000114
 8000954:	40004400 	.word	0x40004400

08000958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b08b      	sub	sp, #44	@ 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	2414      	movs	r4, #20
 8000962:	193b      	adds	r3, r7, r4
 8000964:	0018      	movs	r0, r3
 8000966:	2314      	movs	r3, #20
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f002 ff72 	bl	8003854 <memset>
  if(uartHandle->Instance==USART2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a1c      	ldr	r2, [pc, #112]	@ (80009e8 <HAL_UART_MspInit+0x90>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d132      	bne.n	80009e0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <HAL_UART_MspInit+0x94>)
 800097c:	69da      	ldr	r2, [r3, #28]
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <HAL_UART_MspInit+0x94>)
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	0289      	lsls	r1, r1, #10
 8000984:	430a      	orrs	r2, r1
 8000986:	61da      	str	r2, [r3, #28]
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <HAL_UART_MspInit+0x94>)
 800098a:	69da      	ldr	r2, [r3, #28]
 800098c:	2380      	movs	r3, #128	@ 0x80
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <HAL_UART_MspInit+0x94>)
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <HAL_UART_MspInit+0x94>)
 800099c:	2180      	movs	r1, #128	@ 0x80
 800099e:	0289      	lsls	r1, r1, #10
 80009a0:	430a      	orrs	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_UART_MspInit+0x94>)
 80009a6:	695a      	ldr	r2, [r3, #20]
 80009a8:	2380      	movs	r3, #128	@ 0x80
 80009aa:	029b      	lsls	r3, r3, #10
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009b2:	0021      	movs	r1, r4
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2202      	movs	r2, #2
 80009be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2203      	movs	r2, #3
 80009ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2201      	movs	r2, #1
 80009d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	187a      	adds	r2, r7, r1
 80009d4:	2390      	movs	r3, #144	@ 0x90
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fe8c 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b00b      	add	sp, #44	@ 0x2c
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	40004400 	.word	0x40004400
 80009ec:	40021000 	.word	0x40021000

080009f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f4:	f7ff fefc 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a1e:	f002 ff75 	bl	800390c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a22:	f7ff fd2f 	bl	8000484 <main>

08000a26 <LoopForever>:

LoopForever:
    b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   r0, =_estack
 8000a28:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a34:	08004454 	.word	0x08004454
  ldr r2, =_sbss
 8000a38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a3c:	200002ec 	.word	0x200002ec

08000a40 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <DMA1_Channel1_IRQHandler>
	...

08000a44 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <HAL_Init+0x24>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_Init+0x24>)
 8000a4e:	2110      	movs	r1, #16
 8000a50:	430a      	orrs	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 f809 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5a:	f7ff fdf3 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <HAL_InitTick+0x5c>)
 8000a76:	681c      	ldr	r4, [r3, #0]
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_InitTick+0x60>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	23fa      	movs	r3, #250	@ 0xfa
 8000a80:	0098      	lsls	r0, r3, #2
 8000a82:	f7ff fb4b 	bl	800011c <__udivsi3>
 8000a86:	0003      	movs	r3, r0
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0020      	movs	r0, r4
 8000a8c:	f7ff fb46 	bl	800011c <__udivsi3>
 8000a90:	0003      	movs	r3, r0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fe23 	bl	80016de <HAL_SYSTICK_Config>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e00f      	b.n	8000ac0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d80b      	bhi.n	8000abe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	425b      	negs	r3, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fdf0 	bl	8001694 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_InitTick+0x64>)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b003      	add	sp, #12
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_IncTick+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	001a      	movs	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_IncTick+0x20>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	18d2      	adds	r2, r2, r3
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <HAL_IncTick+0x20>)
 8000ae6:	601a      	str	r2, [r3, #0]
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	20000008 	.word	0x20000008
 8000af4:	2000019c 	.word	0x2000019c

08000af8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	@ (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	2000019c 	.word	0x2000019c

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff fff0 	bl	8000af8 <HAL_GetTick>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3301      	adds	r3, #1
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_Delay+0x44>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	189b      	adds	r3, r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	f7ff ffe0 	bl	8000af8 <HAL_GetTick>
 8000b38:	0002      	movs	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e125      	b.n	8000dbe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10a      	bne.n	8000b90 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2234      	movs	r2, #52	@ 0x34
 8000b84:	2100      	movs	r1, #0
 8000b86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fbac 	bl	80002e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b94:	2210      	movs	r2, #16
 8000b96:	4013      	ands	r3, r2
 8000b98:	d000      	beq.n	8000b9c <HAL_ADC_Init+0x48>
 8000b9a:	e103      	b.n	8000da4 <HAL_ADC_Init+0x250>
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d000      	beq.n	8000ba8 <HAL_ADC_Init+0x54>
 8000ba6:	e0fd      	b.n	8000da4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000bb2:	d000      	beq.n	8000bb6 <HAL_ADC_Init+0x62>
 8000bb4:	e0f6      	b.n	8000da4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bba:	4a83      	ldr	r2, [pc, #524]	@ (8000dc8 <HAL_ADC_Init+0x274>)
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d112      	bne.n	8000bfa <HAL_ADC_Init+0xa6>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4013      	ands	r3, r2
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d009      	beq.n	8000bf6 <HAL_ADC_Init+0xa2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	401a      	ands	r2, r3
 8000bee:	2380      	movs	r3, #128	@ 0x80
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d101      	bne.n	8000bfa <HAL_ADC_Init+0xa6>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_ADC_Init+0xa8>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d116      	bne.n	8000c2e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	2218      	movs	r2, #24
 8000c08:	4393      	bics	r3, r2
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	0899      	lsrs	r1, r3, #2
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4964      	ldr	r1, [pc, #400]	@ (8000dcc <HAL_ADC_Init+0x278>)
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7e1b      	ldrb	r3, [r3, #24]
 8000c42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7e5b      	ldrb	r3, [r3, #25]
 8000c48:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7e9b      	ldrb	r3, [r3, #26]
 8000c50:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c52:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d002      	beq.n	8000c62 <HAL_ADC_Init+0x10e>
 8000c5c:	2380      	movs	r3, #128	@ 0x80
 8000c5e:	015b      	lsls	r3, r3, #5
 8000c60:	e000      	b.n	8000c64 <HAL_ADC_Init+0x110>
 8000c62:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c64:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c6a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d101      	bne.n	8000c78 <HAL_ADC_Init+0x124>
 8000c74:	2304      	movs	r3, #4
 8000c76:	e000      	b.n	8000c7a <HAL_ADC_Init+0x126>
 8000c78:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2124      	movs	r1, #36	@ 0x24
 8000c80:	5c5b      	ldrb	r3, [r3, r1]
 8000c82:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c84:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7edb      	ldrb	r3, [r3, #27]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d115      	bne.n	8000cc0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e9b      	ldrb	r3, [r3, #26]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d105      	bne.n	8000ca8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2280      	movs	r2, #128	@ 0x80
 8000ca0:	0252      	lsls	r2, r2, #9
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	e00b      	b.n	8000cc0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cac:	2220      	movs	r2, #32
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cb8:	2201      	movs	r2, #1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69da      	ldr	r2, [r3, #28]
 8000cc4:	23c2      	movs	r3, #194	@ 0xc2
 8000cc6:	33ff      	adds	r3, #255	@ 0xff
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d007      	beq.n	8000cdc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68d9      	ldr	r1, [r3, #12]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	055b      	lsls	r3, r3, #21
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d01b      	beq.n	8000d30 <HAL_ADC_Init+0x1dc>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d017      	beq.n	8000d30 <HAL_ADC_Init+0x1dc>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d013      	beq.n	8000d30 <HAL_ADC_Init+0x1dc>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d00f      	beq.n	8000d30 <HAL_ADC_Init+0x1dc>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d00b      	beq.n	8000d30 <HAL_ADC_Init+0x1dc>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1c:	2b05      	cmp	r3, #5
 8000d1e:	d007      	beq.n	8000d30 <HAL_ADC_Init+0x1dc>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d24:	2b06      	cmp	r3, #6
 8000d26:	d003      	beq.n	8000d30 <HAL_ADC_Init+0x1dc>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2c:	2b07      	cmp	r3, #7
 8000d2e:	d112      	bne.n	8000d56 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	695a      	ldr	r2, [r3, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2107      	movs	r1, #7
 8000d3c:	438a      	bics	r2, r1
 8000d3e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6959      	ldr	r1, [r3, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd0 <HAL_ADC_Init+0x27c>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d10b      	bne.n	8000d7e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d70:	2203      	movs	r2, #3
 8000d72:	4393      	bics	r3, r2
 8000d74:	2201      	movs	r2, #1
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d7c:	e01c      	b.n	8000db8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d82:	2212      	movs	r2, #18
 8000d84:	4393      	bics	r3, r2
 8000d86:	2210      	movs	r2, #16
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d92:	2201      	movs	r2, #1
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000da2:	e009      	b.n	8000db8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000da8:	2210      	movs	r2, #16
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	fffffefd 	.word	0xfffffefd
 8000dcc:	fffe0219 	.word	0xfffe0219
 8000dd0:	833fffe7 	.word	0x833fffe7

08000dd4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2204      	movs	r2, #4
 8000dec:	4013      	ands	r3, r2
 8000dee:	d156      	bne.n	8000e9e <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2234      	movs	r2, #52	@ 0x34
 8000df4:	5c9b      	ldrb	r3, [r3, r2]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d101      	bne.n	8000dfe <HAL_ADC_Start_IT+0x2a>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e056      	b.n	8000eac <HAL_ADC_Start_IT+0xd8>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2234      	movs	r2, #52	@ 0x34
 8000e02:	2101      	movs	r1, #1
 8000e04:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7e5b      	ldrb	r3, [r3, #25]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d007      	beq.n	8000e1e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e0e:	230f      	movs	r3, #15
 8000e10:	18fc      	adds	r4, r7, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fa4f 	bl	80012b8 <ADC_Enable>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e1e:	230f      	movs	r3, #15
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d13e      	bne.n	8000ea6 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e2c:	4a21      	ldr	r2, [pc, #132]	@ (8000eb4 <HAL_ADC_Start_IT+0xe0>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	0052      	lsls	r2, r2, #1
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2234      	movs	r2, #52	@ 0x34
 8000e44:	2100      	movs	r1, #0
 8000e46:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	221c      	movs	r2, #28
 8000e4e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d110      	bne.n	8000e7a <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2104      	movs	r1, #4
 8000e64:	438a      	bics	r2, r1
 8000e66:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2118      	movs	r1, #24
 8000e74:	430a      	orrs	r2, r1
 8000e76:	605a      	str	r2, [r3, #4]
          break;
 8000e78:	e008      	b.n	8000e8c <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	211c      	movs	r1, #28
 8000e86:	430a      	orrs	r2, r1
 8000e88:	605a      	str	r2, [r3, #4]
          break;
 8000e8a:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2104      	movs	r1, #4
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	e003      	b.n	8000ea6 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b005      	add	sp, #20
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	fffff0fe 	.word	0xfffff0fe

08000eb8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2234      	movs	r2, #52	@ 0x34
 8000ecc:	5c9b      	ldrb	r3, [r3, r2]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d101      	bne.n	8000ed6 <HAL_ADC_Stop_IT+0x1e>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e033      	b.n	8000f3e <HAL_ADC_Stop_IT+0x86>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2234      	movs	r2, #52	@ 0x34
 8000eda:	2101      	movs	r1, #1
 8000edc:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000ede:	250f      	movs	r5, #15
 8000ee0:	197c      	adds	r4, r7, r5
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 fadc 	bl	80014a2 <ADC_ConversionStop>
 8000eea:	0003      	movs	r3, r0
 8000eec:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000eee:	0028      	movs	r0, r5
 8000ef0:	183b      	adds	r3, r7, r0
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d11b      	bne.n	8000f30 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	211c      	movs	r1, #28
 8000f04:	438a      	bics	r2, r1
 8000f06:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000f08:	0005      	movs	r5, r0
 8000f0a:	183c      	adds	r4, r7, r0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 fa56 	bl	80013c0 <ADC_Disable>
 8000f14:	0003      	movs	r3, r0
 8000f16:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000f18:	197b      	adds	r3, r7, r5
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d107      	bne.n	8000f30 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f24:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <HAL_ADC_Stop_IT+0x90>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	2201      	movs	r2, #1
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2234      	movs	r2, #52	@ 0x34
 8000f34:	2100      	movs	r1, #0
 8000f36:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f38:	230f      	movs	r3, #15
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
}
 8000f3e:	0018      	movs	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bdb0      	pop	{r4, r5, r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	fffffefe 	.word	0xfffffefe

08000f4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2204      	movs	r2, #4
 8000f80:	4013      	ands	r3, r2
 8000f82:	d003      	beq.n	8000f8c <HAL_ADC_IRQHandler+0x28>
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2204      	movs	r2, #4
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d107      	bne.n	8000f9c <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2208      	movs	r2, #8
 8000f90:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000f92:	d049      	beq.n	8001028 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2208      	movs	r2, #8
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d045      	beq.n	8001028 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d106      	bne.n	8000fb4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000faa:	2280      	movs	r2, #128	@ 0x80
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	23c0      	movs	r3, #192	@ 0xc0
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d12a      	bne.n	8001018 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d126      	bne.n	8001018 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2208      	movs	r2, #8
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d022      	beq.n	8001018 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2204      	movs	r2, #4
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d110      	bne.n	8001000 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	210c      	movs	r1, #12
 8000fea:	438a      	bics	r2, r1
 8000fec:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80010a8 <HAL_ADC_IRQHandler+0x144>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ffe:	e00b      	b.n	8001018 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001004:	2220      	movs	r2, #32
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001010:	2201      	movs	r2, #1
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	63da      	str	r2, [r3, #60]	@ 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff fa68 	bl	80004f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	220c      	movs	r2, #12
 8001026:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	4013      	ands	r3, r2
 800102e:	d012      	beq.n	8001056 <HAL_ADC_IRQHandler+0xf2>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2280      	movs	r2, #128	@ 0x80
 8001034:	4013      	ands	r3, r2
 8001036:	d00e      	beq.n	8001056 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800103c:	2280      	movs	r2, #128	@ 0x80
 800103e:	0252      	lsls	r2, r2, #9
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	639a      	str	r2, [r3, #56]	@ 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	0018      	movs	r0, r3
 800104a:	f000 f82f 	bl	80010ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2210      	movs	r2, #16
 800105a:	4013      	ands	r3, r2
 800105c:	d020      	beq.n	80010a0 <HAL_ADC_IRQHandler+0x13c>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2210      	movs	r2, #16
 8001062:	4013      	ands	r3, r2
 8001064:	d01c      	beq.n	80010a0 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106a:	2b01      	cmp	r3, #1
 800106c:	d006      	beq.n	800107c <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2201      	movs	r2, #1
 8001076:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10d      	bne.n	8001098 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001080:	2202      	movs	r2, #2
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2210      	movs	r2, #16
 800108e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	0018      	movs	r0, r3
 8001094:	f000 f812 	bl	80010bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2210      	movs	r2, #16
 800109e:	601a      	str	r2, [r3, #0]
  }

}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b004      	add	sp, #16
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	fffffefe 	.word	0xfffffefe

080010ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d6:	230f      	movs	r3, #15
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010e6:	2380      	movs	r3, #128	@ 0x80
 80010e8:	055b      	lsls	r3, r3, #21
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d011      	beq.n	8001112 <HAL_ADC_ConfigChannel+0x46>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d00d      	beq.n	8001112 <HAL_ADC_ConfigChannel+0x46>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d009      	beq.n	8001112 <HAL_ADC_ConfigChannel+0x46>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001102:	2b03      	cmp	r3, #3
 8001104:	d005      	beq.n	8001112 <HAL_ADC_ConfigChannel+0x46>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110a:	2b04      	cmp	r3, #4
 800110c:	d001      	beq.n	8001112 <HAL_ADC_ConfigChannel+0x46>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2234      	movs	r2, #52	@ 0x34
 8001116:	5c9b      	ldrb	r3, [r3, r2]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x54>
 800111c:	2302      	movs	r3, #2
 800111e:	e0bb      	b.n	8001298 <HAL_ADC_ConfigChannel+0x1cc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2234      	movs	r2, #52	@ 0x34
 8001124:	2101      	movs	r1, #1
 8001126:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2204      	movs	r2, #4
 8001130:	4013      	ands	r3, r2
 8001132:	d000      	beq.n	8001136 <HAL_ADC_ConfigChannel+0x6a>
 8001134:	e09f      	b.n	8001276 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a59      	ldr	r2, [pc, #356]	@ (80012a0 <HAL_ADC_ConfigChannel+0x1d4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d100      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x76>
 8001140:	e077      	b.n	8001232 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2201      	movs	r2, #1
 800114e:	409a      	lsls	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	055b      	lsls	r3, r3, #21
 8001160:	429a      	cmp	r2, r3
 8001162:	d037      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d033      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001170:	2b02      	cmp	r3, #2
 8001172:	d02f      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001178:	2b03      	cmp	r3, #3
 800117a:	d02b      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001180:	2b04      	cmp	r3, #4
 8001182:	d027      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001188:	2b05      	cmp	r3, #5
 800118a:	d023      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001190:	2b06      	cmp	r3, #6
 8001192:	d01f      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001198:	2b07      	cmp	r3, #7
 800119a:	d01b      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	2107      	movs	r1, #7
 80011a8:	400b      	ands	r3, r1
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d012      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2107      	movs	r1, #7
 80011ba:	438a      	bics	r2, r1
 80011bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6959      	ldr	r1, [r3, #20]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2207      	movs	r2, #7
 80011ca:	401a      	ands	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b10      	cmp	r3, #16
 80011da:	d003      	beq.n	80011e4 <HAL_ADC_ConfigChannel+0x118>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b11      	cmp	r3, #17
 80011e2:	d152      	bne.n	800128a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <HAL_ADC_ConfigChannel+0x1d8>)
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d102      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x12a>
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	e001      	b.n	80011fa <HAL_ADC_ConfigChannel+0x12e>
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	03db      	lsls	r3, r3, #15
 80011fa:	4a2a      	ldr	r2, [pc, #168]	@ (80012a4 <HAL_ADC_ConfigChannel+0x1d8>)
 80011fc:	430b      	orrs	r3, r1
 80011fe:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b10      	cmp	r3, #16
 8001206:	d140      	bne.n	800128a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <HAL_ADC_ConfigChannel+0x1dc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4927      	ldr	r1, [pc, #156]	@ (80012ac <HAL_ADC_ConfigChannel+0x1e0>)
 800120e:	0018      	movs	r0, r3
 8001210:	f7fe ff84 	bl	800011c <__udivsi3>
 8001214:	0003      	movs	r3, r0
 8001216:	001a      	movs	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	189b      	adds	r3, r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001222:	e002      	b.n	800122a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	3b01      	subs	r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f9      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x158>
 8001230:	e02b      	b.n	800128a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	4099      	lsls	r1, r3
 8001240:	000b      	movs	r3, r1
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	400a      	ands	r2, r1
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b10      	cmp	r3, #16
 8001252:	d003      	beq.n	800125c <HAL_ADC_ConfigChannel+0x190>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b11      	cmp	r3, #17
 800125a:	d116      	bne.n	800128a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_ADC_ConfigChannel+0x1d8>)
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b10      	cmp	r3, #16
 8001266:	d101      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1a0>
 8001268:	4a11      	ldr	r2, [pc, #68]	@ (80012b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800126a:	e000      	b.n	800126e <HAL_ADC_ConfigChannel+0x1a2>
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <HAL_ADC_ConfigChannel+0x1e8>)
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001270:	400a      	ands	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e009      	b.n	800128a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800127a:	2220      	movs	r2, #32
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001282:	230f      	movs	r3, #15
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2234      	movs	r2, #52	@ 0x34
 800128e:	2100      	movs	r1, #0
 8001290:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001292:	230f      	movs	r3, #15
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	781b      	ldrb	r3, [r3, #0]
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b004      	add	sp, #16
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	00001001 	.word	0x00001001
 80012a4:	40012708 	.word	0x40012708
 80012a8:	20000000 	.word	0x20000000
 80012ac:	000f4240 	.word	0x000f4240
 80012b0:	ff7fffff 	.word	0xff7fffff
 80012b4:	ffbfffff 	.word	0xffbfffff

080012b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2203      	movs	r2, #3
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d112      	bne.n	80012fc <ADC_Enable+0x44>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2201      	movs	r2, #1
 80012de:	4013      	ands	r3, r2
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d009      	beq.n	80012f8 <ADC_Enable+0x40>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	401a      	ands	r2, r3
 80012f0:	2380      	movs	r3, #128	@ 0x80
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d101      	bne.n	80012fc <ADC_Enable+0x44>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <ADC_Enable+0x46>
 80012fc:	2300      	movs	r3, #0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d152      	bne.n	80013a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a2a      	ldr	r2, [pc, #168]	@ (80013b4 <ADC_Enable+0xfc>)
 800130a:	4013      	ands	r3, r2
 800130c:	d00d      	beq.n	800132a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001312:	2210      	movs	r2, #16
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800131e:	2201      	movs	r2, #1
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e03f      	b.n	80013aa <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2101      	movs	r1, #1
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <ADC_Enable+0x100>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	491f      	ldr	r1, [pc, #124]	@ (80013bc <ADC_Enable+0x104>)
 8001340:	0018      	movs	r0, r3
 8001342:	f7fe feeb 	bl	800011c <__udivsi3>
 8001346:	0003      	movs	r3, r0
 8001348:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800134a:	e002      	b.n	8001352 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	3b01      	subs	r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f9      	bne.n	800134c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001358:	f7ff fbce 	bl	8000af8 <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001360:	e01b      	b.n	800139a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001362:	f7ff fbc9 	bl	8000af8 <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d914      	bls.n	800139a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2201      	movs	r2, #1
 8001378:	4013      	ands	r3, r2
 800137a:	2b01      	cmp	r3, #1
 800137c:	d00d      	beq.n	800139a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001382:	2210      	movs	r2, #16
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800138e:	2201      	movs	r2, #1
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e007      	b.n	80013aa <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d1dc      	bne.n	8001362 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b004      	add	sp, #16
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	80000017 	.word	0x80000017
 80013b8:	20000000 	.word	0x20000000
 80013bc:	000f4240 	.word	0x000f4240

080013c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d112      	bne.n	8001400 <ADC_Disable+0x40>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2201      	movs	r2, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d009      	beq.n	80013fc <ADC_Disable+0x3c>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	401a      	ands	r2, r3
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d101      	bne.n	8001400 <ADC_Disable+0x40>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <ADC_Disable+0x42>
 8001400:	2300      	movs	r3, #0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d048      	beq.n	8001498 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2205      	movs	r2, #5
 800140e:	4013      	ands	r3, r2
 8001410:	2b01      	cmp	r3, #1
 8001412:	d110      	bne.n	8001436 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2102      	movs	r1, #2
 8001420:	430a      	orrs	r2, r1
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2203      	movs	r2, #3
 800142a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800142c:	f7ff fb64 	bl	8000af8 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001434:	e029      	b.n	800148a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800143a:	2210      	movs	r2, #16
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001446:	2201      	movs	r2, #1
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e023      	b.n	800149a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001452:	f7ff fb51 	bl	8000af8 <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d914      	bls.n	800148a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	2b01      	cmp	r3, #1
 800146c:	d10d      	bne.n	800148a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001472:	2210      	movs	r2, #16
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800147e:	2201      	movs	r2, #1
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e007      	b.n	800149a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2201      	movs	r2, #1
 8001492:	4013      	ands	r3, r2
 8001494:	2b01      	cmp	r3, #1
 8001496:	d0dc      	beq.n	8001452 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b004      	add	sp, #16
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2204      	movs	r2, #4
 80014b6:	4013      	ands	r3, r2
 80014b8:	d03a      	beq.n	8001530 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2204      	movs	r2, #4
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d10d      	bne.n	80014e4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2202      	movs	r2, #2
 80014d0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014d2:	d107      	bne.n	80014e4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2110      	movs	r1, #16
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014e4:	f7ff fb08 	bl	8000af8 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014ec:	e01a      	b.n	8001524 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014ee:	f7ff fb03 	bl	8000af8 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d913      	bls.n	8001524 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2204      	movs	r2, #4
 8001504:	4013      	ands	r3, r2
 8001506:	d00d      	beq.n	8001524 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150c:	2210      	movs	r2, #16
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001518:	2201      	movs	r2, #1
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e006      	b.n	8001532 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2204      	movs	r2, #4
 800152c:	4013      	ands	r3, r2
 800152e:	d1de      	bne.n	80014ee <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	0002      	movs	r2, r0
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001548:	1dfb      	adds	r3, r7, #7
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b7f      	cmp	r3, #127	@ 0x7f
 800154e:	d809      	bhi.n	8001564 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001550:	1dfb      	adds	r3, r7, #7
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	001a      	movs	r2, r3
 8001556:	231f      	movs	r3, #31
 8001558:	401a      	ands	r2, r3
 800155a:	4b04      	ldr	r3, [pc, #16]	@ (800156c <__NVIC_EnableIRQ+0x30>)
 800155c:	2101      	movs	r1, #1
 800155e:	4091      	lsls	r1, r2
 8001560:	000a      	movs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
  }
}
 8001564:	46c0      	nop			@ (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b7f      	cmp	r3, #127	@ 0x7f
 8001584:	d828      	bhi.n	80015d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001586:	4a2f      	ldr	r2, [pc, #188]	@ (8001644 <__NVIC_SetPriority+0xd4>)
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b25b      	sxtb	r3, r3
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	33c0      	adds	r3, #192	@ 0xc0
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	589b      	ldr	r3, [r3, r2]
 8001596:	1dfa      	adds	r2, r7, #7
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	0011      	movs	r1, r2
 800159c:	2203      	movs	r2, #3
 800159e:	400a      	ands	r2, r1
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	21ff      	movs	r1, #255	@ 0xff
 80015a4:	4091      	lsls	r1, r2
 80015a6:	000a      	movs	r2, r1
 80015a8:	43d2      	mvns	r2, r2
 80015aa:	401a      	ands	r2, r3
 80015ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	019b      	lsls	r3, r3, #6
 80015b2:	22ff      	movs	r2, #255	@ 0xff
 80015b4:	401a      	ands	r2, r3
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	0018      	movs	r0, r3
 80015bc:	2303      	movs	r3, #3
 80015be:	4003      	ands	r3, r0
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c4:	481f      	ldr	r0, [pc, #124]	@ (8001644 <__NVIC_SetPriority+0xd4>)
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	430a      	orrs	r2, r1
 80015d0:	33c0      	adds	r3, #192	@ 0xc0
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015d6:	e031      	b.n	800163c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001648 <__NVIC_SetPriority+0xd8>)
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0019      	movs	r1, r3
 80015e0:	230f      	movs	r3, #15
 80015e2:	400b      	ands	r3, r1
 80015e4:	3b08      	subs	r3, #8
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3306      	adds	r3, #6
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	18d3      	adds	r3, r2, r3
 80015ee:	3304      	adds	r3, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1dfa      	adds	r2, r7, #7
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	0011      	movs	r1, r2
 80015f8:	2203      	movs	r2, #3
 80015fa:	400a      	ands	r2, r1
 80015fc:	00d2      	lsls	r2, r2, #3
 80015fe:	21ff      	movs	r1, #255	@ 0xff
 8001600:	4091      	lsls	r1, r2
 8001602:	000a      	movs	r2, r1
 8001604:	43d2      	mvns	r2, r2
 8001606:	401a      	ands	r2, r3
 8001608:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	019b      	lsls	r3, r3, #6
 800160e:	22ff      	movs	r2, #255	@ 0xff
 8001610:	401a      	ands	r2, r3
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	0018      	movs	r0, r3
 8001618:	2303      	movs	r3, #3
 800161a:	4003      	ands	r3, r0
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <__NVIC_SetPriority+0xd8>)
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	001c      	movs	r4, r3
 8001628:	230f      	movs	r3, #15
 800162a:	4023      	ands	r3, r4
 800162c:	3b08      	subs	r3, #8
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	430a      	orrs	r2, r1
 8001632:	3306      	adds	r3, #6
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	18c3      	adds	r3, r0, r3
 8001638:	3304      	adds	r3, #4
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	46c0      	nop			@ (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b003      	add	sp, #12
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	1e5a      	subs	r2, r3, #1
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	045b      	lsls	r3, r3, #17
 800165c:	429a      	cmp	r2, r3
 800165e:	d301      	bcc.n	8001664 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001660:	2301      	movs	r3, #1
 8001662:	e010      	b.n	8001686 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001664:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <SysTick_Config+0x44>)
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	3a01      	subs	r2, #1
 800166a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166c:	2301      	movs	r3, #1
 800166e:	425b      	negs	r3, r3
 8001670:	2103      	movs	r1, #3
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff ff7c 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <SysTick_Config+0x44>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <SysTick_Config+0x44>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	210f      	movs	r1, #15
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	1c02      	adds	r2, r0, #0
 80016a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	0011      	movs	r1, r2
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff ff5d 	bl	8001570 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	0002      	movs	r2, r0
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff ff33 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff ffaf 	bl	800164c <SysTick_Config>
 80016ee:	0003      	movs	r3, r0
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e14f      	b.n	80019a8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4091      	lsls	r1, r2
 8001712:	000a      	movs	r2, r1
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d100      	bne.n	8001720 <HAL_GPIO_Init+0x28>
 800171e:	e140      	b.n	80019a2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2203      	movs	r2, #3
 8001726:	4013      	ands	r3, r2
 8001728:	2b01      	cmp	r3, #1
 800172a:	d005      	beq.n	8001738 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2203      	movs	r2, #3
 8001732:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001734:	2b02      	cmp	r3, #2
 8001736:	d130      	bne.n	800179a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	409a      	lsls	r2, r3
 8001746:	0013      	movs	r3, r2
 8001748:	43da      	mvns	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	409a      	lsls	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
 8001774:	0013      	movs	r3, r2
 8001776:	43da      	mvns	r2, r3
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	2201      	movs	r2, #1
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
 800178c:	0013      	movs	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2203      	movs	r2, #3
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d017      	beq.n	80017d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2203      	movs	r2, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d123      	bne.n	800182a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	58d3      	ldr	r3, [r2, r3]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2207      	movs	r2, #7
 80017f4:	4013      	ands	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	43da      	mvns	r2, r3
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2107      	movs	r1, #7
 800180e:	400b      	ands	r3, r1
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	6939      	ldr	r1, [r7, #16]
 8001828:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	409a      	lsls	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	43da      	mvns	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2203      	movs	r2, #3
 8001848:	401a      	ands	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	23c0      	movs	r3, #192	@ 0xc0
 8001864:	029b      	lsls	r3, r3, #10
 8001866:	4013      	ands	r3, r2
 8001868:	d100      	bne.n	800186c <HAL_GPIO_Init+0x174>
 800186a:	e09a      	b.n	80019a2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186c:	4b54      	ldr	r3, [pc, #336]	@ (80019c0 <HAL_GPIO_Init+0x2c8>)
 800186e:	699a      	ldr	r2, [r3, #24]
 8001870:	4b53      	ldr	r3, [pc, #332]	@ (80019c0 <HAL_GPIO_Init+0x2c8>)
 8001872:	2101      	movs	r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	4b51      	ldr	r3, [pc, #324]	@ (80019c0 <HAL_GPIO_Init+0x2c8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001884:	4a4f      	ldr	r2, [pc, #316]	@ (80019c4 <HAL_GPIO_Init+0x2cc>)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	589b      	ldr	r3, [r3, r2]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2203      	movs	r2, #3
 8001896:	4013      	ands	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	409a      	lsls	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	43da      	mvns	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	2390      	movs	r3, #144	@ 0x90
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0x1e2>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a44      	ldr	r2, [pc, #272]	@ (80019c8 <HAL_GPIO_Init+0x2d0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00d      	beq.n	80018d6 <HAL_GPIO_Init+0x1de>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a43      	ldr	r2, [pc, #268]	@ (80019cc <HAL_GPIO_Init+0x2d4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x1da>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a42      	ldr	r2, [pc, #264]	@ (80019d0 <HAL_GPIO_Init+0x2d8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_GPIO_Init+0x1d6>
 80018ca:	2303      	movs	r3, #3
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x1e4>
 80018ce:	2305      	movs	r3, #5
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_Init+0x1e4>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_Init+0x1e4>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x1e4>
 80018da:	2300      	movs	r3, #0
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	2103      	movs	r1, #3
 80018e0:	400a      	ands	r2, r1
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4093      	lsls	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ec:	4935      	ldr	r1, [pc, #212]	@ (80019c4 <HAL_GPIO_Init+0x2cc>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fa:	4b36      	ldr	r3, [pc, #216]	@ (80019d4 <HAL_GPIO_Init+0x2dc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43da      	mvns	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	2380      	movs	r3, #128	@ 0x80
 8001910:	035b      	lsls	r3, r3, #13
 8001912:	4013      	ands	r3, r2
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800191e:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_GPIO_Init+0x2dc>)
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_GPIO_Init+0x2dc>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43da      	mvns	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	039b      	lsls	r3, r3, #14
 800193c:	4013      	ands	r3, r2
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001948:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <HAL_GPIO_Init+0x2dc>)
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800194e:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <HAL_GPIO_Init+0x2dc>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43da      	mvns	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	2380      	movs	r3, #128	@ 0x80
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	4013      	ands	r3, r2
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_GPIO_Init+0x2dc>)
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001978:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_GPIO_Init+0x2dc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43da      	mvns	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	4013      	ands	r3, r2
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800199c:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <HAL_GPIO_Init+0x2dc>)
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	40da      	lsrs	r2, r3
 80019b0:	1e13      	subs	r3, r2, #0
 80019b2:	d000      	beq.n	80019b6 <HAL_GPIO_Init+0x2be>
 80019b4:	e6a8      	b.n	8001708 <HAL_GPIO_Init+0x10>
  } 
}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b006      	add	sp, #24
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000c00 	.word	0x48000c00
 80019d4:	40010400 	.word	0x40010400

080019d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	0008      	movs	r0, r1
 80019e2:	0011      	movs	r1, r2
 80019e4:	1cbb      	adds	r3, r7, #2
 80019e6:	1c02      	adds	r2, r0, #0
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	1c7b      	adds	r3, r7, #1
 80019ec:	1c0a      	adds	r2, r1, #0
 80019ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f0:	1c7b      	adds	r3, r7, #1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f8:	1cbb      	adds	r3, r7, #2
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a00:	e003      	b.n	8001a0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a02:	1cbb      	adds	r3, r7, #2
 8001a04:	881a      	ldrh	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	000a      	movs	r2, r1
 8001a1e:	1cfb      	adds	r3, r7, #3
 8001a20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001a28:	2104      	movs	r1, #4
 8001a2a:	438a      	bics	r2, r1
 8001a2c:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001a2e:	1cfb      	adds	r3, r7, #3
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001a36:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001a38:	e002      	b.n	8001a40 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8001a3a:	bf40      	sev
    __WFE();
 8001a3c:	bf20      	wfe
    __WFE();
 8001a3e:	bf20      	wfe
}
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e305      	b.n	800206a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x1e>
 8001a68:	e08d      	b.n	8001b86 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a6a:	4bc5      	ldr	r3, [pc, #788]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	220c      	movs	r2, #12
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d00e      	beq.n	8001a94 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a76:	4bc2      	ldr	r3, [pc, #776]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d116      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x64>
 8001a82:	4bbf      	ldr	r3, [pc, #764]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	23c0      	movs	r3, #192	@ 0xc0
 8001a88:	025b      	lsls	r3, r3, #9
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	025b      	lsls	r3, r3, #9
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d10d      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	4bba      	ldr	r3, [pc, #744]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	029b      	lsls	r3, r3, #10
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x56>
 8001aa0:	e070      	b.n	8001b84 <HAL_RCC_OscConfig+0x138>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d000      	beq.n	8001aac <HAL_RCC_OscConfig+0x60>
 8001aaa:	e06b      	b.n	8001b84 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e2dc      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x7c>
 8001ab8:	4bb1      	ldr	r3, [pc, #708]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4bb0      	ldr	r3, [pc, #704]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001abe:	2180      	movs	r1, #128	@ 0x80
 8001ac0:	0249      	lsls	r1, r1, #9
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e02f      	b.n	8001b28 <HAL_RCC_OscConfig+0xdc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10c      	bne.n	8001aea <HAL_RCC_OscConfig+0x9e>
 8001ad0:	4bab      	ldr	r3, [pc, #684]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4baa      	ldr	r3, [pc, #680]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001ad6:	49ab      	ldr	r1, [pc, #684]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001ad8:	400a      	ands	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	4ba8      	ldr	r3, [pc, #672]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4ba7      	ldr	r3, [pc, #668]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001ae2:	49a9      	ldr	r1, [pc, #676]	@ (8001d88 <HAL_RCC_OscConfig+0x33c>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e01e      	b.n	8001b28 <HAL_RCC_OscConfig+0xdc>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d10e      	bne.n	8001b10 <HAL_RCC_OscConfig+0xc4>
 8001af2:	4ba3      	ldr	r3, [pc, #652]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4ba2      	ldr	r3, [pc, #648]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001af8:	2180      	movs	r1, #128	@ 0x80
 8001afa:	02c9      	lsls	r1, r1, #11
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	4b9f      	ldr	r3, [pc, #636]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b9e      	ldr	r3, [pc, #632]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b06:	2180      	movs	r1, #128	@ 0x80
 8001b08:	0249      	lsls	r1, r1, #9
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0xdc>
 8001b10:	4b9b      	ldr	r3, [pc, #620]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b9a      	ldr	r3, [pc, #616]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b16:	499b      	ldr	r1, [pc, #620]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	4b98      	ldr	r3, [pc, #608]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b97      	ldr	r3, [pc, #604]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b22:	4999      	ldr	r1, [pc, #612]	@ (8001d88 <HAL_RCC_OscConfig+0x33c>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d014      	beq.n	8001b5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7fe ffe2 	bl	8000af8 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3a:	f7fe ffdd 	bl	8000af8 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b64      	cmp	r3, #100	@ 0x64
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e28e      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	029b      	lsls	r3, r3, #10
 8001b54:	4013      	ands	r3, r2
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0xee>
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7fe ffcd 	bl	8000af8 <HAL_GetTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b64:	f7fe ffc8 	bl	8000af8 <HAL_GetTick>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	@ 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e279      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b82      	ldr	r3, [pc, #520]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	@ 0x80
 8001b7c:	029b      	lsls	r3, r3, #10
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x118>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d100      	bne.n	8001b92 <HAL_RCC_OscConfig+0x146>
 8001b90:	e06c      	b.n	8001c6c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b92:	4b7b      	ldr	r3, [pc, #492]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	220c      	movs	r2, #12
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d00e      	beq.n	8001bba <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b9c:	4b78      	ldr	r3, [pc, #480]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d11f      	bne.n	8001be8 <HAL_RCC_OscConfig+0x19c>
 8001ba8:	4b75      	ldr	r3, [pc, #468]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	23c0      	movs	r3, #192	@ 0xc0
 8001bae:	025b      	lsls	r3, r3, #9
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d116      	bne.n	8001be8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	4b71      	ldr	r3, [pc, #452]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x184>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e24c      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b6b      	ldr	r3, [pc, #428]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	22f8      	movs	r2, #248	@ 0xf8
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00da      	lsls	r2, r3, #3
 8001be0:	4b67      	ldr	r3, [pc, #412]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	e041      	b.n	8001c6c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d024      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b63      	ldr	r3, [pc, #396]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b62      	ldr	r3, [pc, #392]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ff7c 	bl	8000af8 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c06:	f7fe ff77 	bl	8000af8 <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e228      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b59      	ldr	r3, [pc, #356]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d0f1      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b57      	ldr	r3, [pc, #348]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	22f8      	movs	r2, #248	@ 0xf8
 8001c28:	4393      	bics	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	00da      	lsls	r2, r3, #3
 8001c32:	4b53      	ldr	r3, [pc, #332]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e018      	b.n	8001c6c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b51      	ldr	r3, [pc, #324]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b50      	ldr	r3, [pc, #320]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	438a      	bics	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7fe ff57 	bl	8000af8 <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c50:	f7fe ff52 	bl	8000af8 <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e203      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b47      	ldr	r3, [pc, #284]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d1f1      	bne.n	8001c50 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2208      	movs	r2, #8
 8001c72:	4013      	ands	r3, r2
 8001c74:	d036      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d019      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001c80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c82:	4b3f      	ldr	r3, [pc, #252]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7fe ff35 	bl	8000af8 <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c94:	f7fe ff30 	bl	8000af8 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e1e1      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d0f1      	beq.n	8001c94 <HAL_RCC_OscConfig+0x248>
 8001cb0:	e018      	b.n	8001ce4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb2:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001cb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cb6:	4b32      	ldr	r3, [pc, #200]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	438a      	bics	r2, r1
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7fe ff1b 	bl	8000af8 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7fe ff16 	bl	8000af8 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1c7      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cda:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d1f1      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	4013      	ands	r3, r2
 8001cec:	d100      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2a4>
 8001cee:	e0b5      	b.n	8001e5c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf0:	201f      	movs	r0, #31
 8001cf2:	183b      	adds	r3, r7, r0
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	055b      	lsls	r3, r3, #21
 8001d00:	4013      	ands	r3, r2
 8001d02:	d110      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001d0a:	2180      	movs	r1, #128	@ 0x80
 8001d0c:	0549      	lsls	r1, r1, #21
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	61da      	str	r2, [r3, #28]
 8001d12:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	055b      	lsls	r3, r3, #21
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d11a      	bne.n	8001d68 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	0049      	lsls	r1, r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d40:	f7fe feda 	bl	8000af8 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7fe fed5 	bl	8000af8 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b64      	cmp	r3, #100	@ 0x64
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e186      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	@ 0x80
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10f      	bne.n	8001d90 <HAL_RCC_OscConfig+0x344>
 8001d70:	4b03      	ldr	r3, [pc, #12]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001d72:	6a1a      	ldr	r2, [r3, #32]
 8001d74:	4b02      	ldr	r3, [pc, #8]	@ (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	621a      	str	r2, [r3, #32]
 8001d7c:	e036      	b.n	8001dec <HAL_RCC_OscConfig+0x3a0>
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	40021000 	.word	0x40021000
 8001d84:	fffeffff 	.word	0xfffeffff
 8001d88:	fffbffff 	.word	0xfffbffff
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x366>
 8001d98:	4bb6      	ldr	r3, [pc, #728]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	4bb5      	ldr	r3, [pc, #724]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	438a      	bics	r2, r1
 8001da2:	621a      	str	r2, [r3, #32]
 8001da4:	4bb3      	ldr	r3, [pc, #716]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	4bb2      	ldr	r3, [pc, #712]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001daa:	2104      	movs	r1, #4
 8001dac:	438a      	bics	r2, r1
 8001dae:	621a      	str	r2, [r3, #32]
 8001db0:	e01c      	b.n	8001dec <HAL_RCC_OscConfig+0x3a0>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x388>
 8001dba:	4bae      	ldr	r3, [pc, #696]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	4bad      	ldr	r3, [pc, #692]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	621a      	str	r2, [r3, #32]
 8001dc6:	4bab      	ldr	r3, [pc, #684]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001dc8:	6a1a      	ldr	r2, [r3, #32]
 8001dca:	4baa      	ldr	r3, [pc, #680]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	621a      	str	r2, [r3, #32]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0x3a0>
 8001dd4:	4ba7      	ldr	r3, [pc, #668]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001dd6:	6a1a      	ldr	r2, [r3, #32]
 8001dd8:	4ba6      	ldr	r3, [pc, #664]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001dda:	2101      	movs	r1, #1
 8001ddc:	438a      	bics	r2, r1
 8001dde:	621a      	str	r2, [r3, #32]
 8001de0:	4ba4      	ldr	r3, [pc, #656]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001de2:	6a1a      	ldr	r2, [r3, #32]
 8001de4:	4ba3      	ldr	r3, [pc, #652]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001de6:	2104      	movs	r1, #4
 8001de8:	438a      	bics	r2, r1
 8001dea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d014      	beq.n	8001e1e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7fe fe80 	bl	8000af8 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e009      	b.n	8001e12 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe fe7b 	bl	8000af8 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a9b      	ldr	r2, [pc, #620]	@ (8002078 <HAL_RCC_OscConfig+0x62c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e12b      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	4b98      	ldr	r3, [pc, #608]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	2202      	movs	r2, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3b2>
 8001e1c:	e013      	b.n	8001e46 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7fe fe6b 	bl	8000af8 <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e26:	e009      	b.n	8001e3c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7fe fe66 	bl	8000af8 <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	4a91      	ldr	r2, [pc, #580]	@ (8002078 <HAL_RCC_OscConfig+0x62c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e116      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	4b8d      	ldr	r3, [pc, #564]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	2202      	movs	r2, #2
 8001e42:	4013      	ands	r3, r2
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e46:	231f      	movs	r3, #31
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e50:	4b88      	ldr	r3, [pc, #544]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001e52:	69da      	ldr	r2, [r3, #28]
 8001e54:	4b87      	ldr	r3, [pc, #540]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001e56:	4989      	ldr	r1, [pc, #548]	@ (800207c <HAL_RCC_OscConfig+0x630>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2210      	movs	r2, #16
 8001e62:	4013      	ands	r3, r2
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d12a      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e6e:	4b81      	ldr	r3, [pc, #516]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e72:	4b80      	ldr	r3, [pc, #512]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001e74:	2104      	movs	r1, #4
 8001e76:	430a      	orrs	r2, r1
 8001e78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e7a:	4b7e      	ldr	r3, [pc, #504]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7fe fe37 	bl	8000af8 <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e90:	f7fe fe32 	bl	8000af8 <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0e3      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ea2:	4b74      	ldr	r3, [pc, #464]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d0f1      	beq.n	8001e90 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001eac:	4b71      	ldr	r3, [pc, #452]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb0:	22f8      	movs	r2, #248	@ 0xf8
 8001eb2:	4393      	bics	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	00da      	lsls	r2, r3, #3
 8001ebc:	4b6d      	ldr	r3, [pc, #436]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ec2:	e034      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	3305      	adds	r3, #5
 8001eca:	d111      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ecc:	4b69      	ldr	r3, [pc, #420]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ed0:	4b68      	ldr	r3, [pc, #416]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ed8:	4b66      	ldr	r3, [pc, #408]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001edc:	22f8      	movs	r2, #248	@ 0xf8
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	00da      	lsls	r2, r3, #3
 8001ee8:	4b62      	ldr	r3, [pc, #392]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eee:	e01e      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ef0:	4b60      	ldr	r3, [pc, #384]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001efc:	4b5d      	ldr	r3, [pc, #372]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f00:	4b5c      	ldr	r3, [pc, #368]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f02:	2101      	movs	r1, #1
 8001f04:	438a      	bics	r2, r1
 8001f06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7fe fdf6 	bl	8000af8 <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f12:	f7fe fdf1 	bl	8000af8 <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0a2      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f24:	4b53      	ldr	r3, [pc, #332]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d1f1      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d100      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4ec>
 8001f36:	e097      	b.n	8002068 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	4b4e      	ldr	r3, [pc, #312]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	220c      	movs	r2, #12
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d100      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4fa>
 8001f44:	e06b      	b.n	800201e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d14c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b49      	ldr	r3, [pc, #292]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b48      	ldr	r3, [pc, #288]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f54:	494a      	ldr	r1, [pc, #296]	@ (8002080 <HAL_RCC_OscConfig+0x634>)
 8001f56:	400a      	ands	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fdcd 	bl	8000af8 <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f64:	f7fe fdc8 	bl	8000af8 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e079      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	4b3f      	ldr	r3, [pc, #252]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	049b      	lsls	r3, r3, #18
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f82:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f86:	220f      	movs	r2, #15
 8001f88:	4393      	bics	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f90:	4b38      	ldr	r3, [pc, #224]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f96:	4b37      	ldr	r3, [pc, #220]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a3a      	ldr	r2, [pc, #232]	@ (8002084 <HAL_RCC_OscConfig+0x638>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	4b32      	ldr	r3, [pc, #200]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b30      	ldr	r3, [pc, #192]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fb6:	2180      	movs	r1, #128	@ 0x80
 8001fb8:	0449      	lsls	r1, r1, #17
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fd9b 	bl	8000af8 <HAL_GetTick>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe fd96 	bl	8000af8 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e047      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fda:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	049b      	lsls	r3, r3, #18
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x57c>
 8001fe6:	e03f      	b.n	8002068 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fee:	4924      	ldr	r1, [pc, #144]	@ (8002080 <HAL_RCC_OscConfig+0x634>)
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fd80 	bl	8000af8 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe fd7b 	bl	8000af8 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e02c      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	049b      	lsls	r3, r3, #18
 8002018:	4013      	ands	r3, r2
 800201a:	d1f0      	bne.n	8001ffe <HAL_RCC_OscConfig+0x5b2>
 800201c:	e024      	b.n	8002068 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e01f      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800202a:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002030:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_RCC_OscConfig+0x628>)
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	23c0      	movs	r3, #192	@ 0xc0
 800203a:	025b      	lsls	r3, r3, #9
 800203c:	401a      	ands	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	429a      	cmp	r2, r3
 8002044:	d10e      	bne.n	8002064 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	220f      	movs	r2, #15
 800204a:	401a      	ands	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d107      	bne.n	8002064 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	23f0      	movs	r3, #240	@ 0xf0
 8002058:	039b      	lsls	r3, r3, #14
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b008      	add	sp, #32
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	40021000 	.word	0x40021000
 8002078:	00001388 	.word	0x00001388
 800207c:	efffffff 	.word	0xefffffff
 8002080:	feffffff 	.word	0xfeffffff
 8002084:	ffc27fff 	.word	0xffc27fff

08002088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b3      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800209c:	4b5b      	ldr	r3, [pc, #364]	@ (800220c <HAL_RCC_ClockConfig+0x184>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d911      	bls.n	80020ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b58      	ldr	r3, [pc, #352]	@ (800220c <HAL_RCC_ClockConfig+0x184>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4393      	bics	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	4b55      	ldr	r3, [pc, #340]	@ (800220c <HAL_RCC_ClockConfig+0x184>)
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020bc:	4b53      	ldr	r3, [pc, #332]	@ (800220c <HAL_RCC_ClockConfig+0x184>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e09a      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d015      	beq.n	8002104 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2204      	movs	r2, #4
 80020de:	4013      	ands	r3, r2
 80020e0:	d006      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 80020e8:	21e0      	movs	r1, #224	@ 0xe0
 80020ea:	00c9      	lsls	r1, r1, #3
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b47      	ldr	r3, [pc, #284]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	22f0      	movs	r2, #240	@ 0xf0
 80020f6:	4393      	bics	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	4b44      	ldr	r3, [pc, #272]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d040      	beq.n	8002190 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b3e      	ldr	r3, [pc, #248]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	@ 0x80
 800211c:	029b      	lsls	r3, r3, #10
 800211e:	4013      	ands	r3, r2
 8002120:	d114      	bne.n	800214c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06e      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	@ 0x80
 8002134:	049b      	lsls	r3, r3, #18
 8002136:	4013      	ands	r3, r2
 8002138:	d108      	bne.n	800214c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e062      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e05b      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214c:	4b30      	ldr	r3, [pc, #192]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2203      	movs	r2, #3
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4b2d      	ldr	r3, [pc, #180]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002160:	f7fe fcca 	bl	8000af8 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002168:	e009      	b.n	800217e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216a:	f7fe fcc5 	bl	8000af8 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	4a27      	ldr	r2, [pc, #156]	@ (8002214 <HAL_RCC_ClockConfig+0x18c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e042      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	4b24      	ldr	r3, [pc, #144]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	220c      	movs	r2, #12
 8002184:	401a      	ands	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d1ec      	bne.n	800216a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <HAL_RCC_ClockConfig+0x184>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d211      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_RCC_ClockConfig+0x184>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2201      	movs	r2, #1
 80021a4:	4393      	bics	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_RCC_ClockConfig+0x184>)
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b0:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_RCC_ClockConfig+0x184>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e020      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2204      	movs	r2, #4
 80021c8:	4013      	ands	r3, r2
 80021ca:	d009      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a11      	ldr	r2, [pc, #68]	@ (8002218 <HAL_RCC_ClockConfig+0x190>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021e0:	f000 f820 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021e4:	0001      	movs	r1, r0
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_RCC_ClockConfig+0x188>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	220f      	movs	r2, #15
 80021ee:	4013      	ands	r3, r2
 80021f0:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <HAL_RCC_ClockConfig+0x194>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	000a      	movs	r2, r1
 80021f6:	40da      	lsrs	r2, r3
 80021f8:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_RCC_ClockConfig+0x198>)
 80021fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7fe fc35 	bl	8000a6c <HAL_InitTick>
  
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	b004      	add	sp, #16
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40022000 	.word	0x40022000
 8002210:	40021000 	.word	0x40021000
 8002214:	00001388 	.word	0x00001388
 8002218:	fffff8ff 	.word	0xfffff8ff
 800221c:	080043e0 	.word	0x080043e0
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800223e:	4b21      	ldr	r3, [pc, #132]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	220c      	movs	r2, #12
 8002248:	4013      	ands	r3, r2
 800224a:	2b04      	cmp	r3, #4
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x30>
 800224e:	2b08      	cmp	r3, #8
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x36>
 8002252:	e02e      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002254:	4b1c      	ldr	r3, [pc, #112]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002256:	613b      	str	r3, [r7, #16]
      break;
 8002258:	e02e      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	0c9b      	lsrs	r3, r3, #18
 800225e:	220f      	movs	r2, #15
 8002260:	4013      	ands	r3, r2
 8002262:	4a1a      	ldr	r2, [pc, #104]	@ (80022cc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002264:	5cd3      	ldrb	r3, [r2, r3]
 8002266:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002268:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226c:	220f      	movs	r2, #15
 800226e:	4013      	ands	r3, r2
 8002270:	4a17      	ldr	r2, [pc, #92]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	23c0      	movs	r3, #192	@ 0xc0
 800227a:	025b      	lsls	r3, r3, #9
 800227c:	401a      	ands	r2, r3
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	429a      	cmp	r2, r3
 8002284:	d109      	bne.n	800229a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	480f      	ldr	r0, [pc, #60]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800228a:	f7fd ff47 	bl	800011c <__udivsi3>
 800228e:	0003      	movs	r3, r0
 8002290:	001a      	movs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4353      	muls	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	e008      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	480a      	ldr	r0, [pc, #40]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800229e:	f7fd ff3d 	bl	800011c <__udivsi3>
 80022a2:	0003      	movs	r3, r0
 80022a4:	001a      	movs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4353      	muls	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	613b      	str	r3, [r7, #16]
      break;
 80022b0:	e002      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b4:	613b      	str	r3, [r7, #16]
      break;
 80022b6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022b8:	693b      	ldr	r3, [r7, #16]
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	40021000 	.word	0x40021000
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	080043f8 	.word	0x080043f8
 80022d0:	08004408 	.word	0x08004408

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b02      	ldr	r3, [pc, #8]	@ (80022e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	0018      	movs	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80022ec:	f7ff fff2 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f0:	0001      	movs	r1, r0
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	2207      	movs	r2, #7
 80022fa:	4013      	ands	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	@ (8002310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	40d9      	lsrs	r1, r3
 8002302:	000b      	movs	r3, r1
}    
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	40021000 	.word	0x40021000
 8002310:	080043f0 	.word	0x080043f0

08002314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e042      	b.n	80023ac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	223d      	movs	r2, #61	@ 0x3d
 800232a:	5c9b      	ldrb	r3, [r3, r2]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d107      	bne.n	8002342 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223c      	movs	r2, #60	@ 0x3c
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	0018      	movs	r0, r3
 800233e:	f7fe fab5 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	223d      	movs	r2, #61	@ 0x3d
 8002346:	2102      	movs	r1, #2
 8002348:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	0019      	movs	r1, r3
 8002354:	0010      	movs	r0, r2
 8002356:	f000 fa5b 	bl	8002810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2246      	movs	r2, #70	@ 0x46
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	223e      	movs	r2, #62	@ 0x3e
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223f      	movs	r2, #63	@ 0x3f
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2240      	movs	r2, #64	@ 0x40
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2241      	movs	r2, #65	@ 0x41
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2242      	movs	r2, #66	@ 0x42
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2243      	movs	r2, #67	@ 0x43
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2244      	movs	r2, #68	@ 0x44
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2245      	movs	r2, #69	@ 0x45
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	223d      	movs	r2, #61	@ 0x3d
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	223d      	movs	r2, #61	@ 0x3d
 80023c0:	5c9b      	ldrb	r3, [r3, r2]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d001      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e035      	b.n	8002438 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	223d      	movs	r2, #61	@ 0x3d
 80023d0:	2102      	movs	r1, #2
 80023d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2101      	movs	r1, #1
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a15      	ldr	r2, [pc, #84]	@ (8002440 <HAL_TIM_Base_Start_IT+0x8c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_TIM_Base_Start_IT+0x4e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <HAL_TIM_Base_Start_IT+0x90>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_TIM_Base_Start_IT+0x4e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <HAL_TIM_Base_Start_IT+0x94>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d111      	bne.n	8002426 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2207      	movs	r2, #7
 800240a:	4013      	ands	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b06      	cmp	r3, #6
 8002412:	d010      	beq.n	8002436 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2101      	movs	r1, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002424:	e007      	b.n	8002436 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	0018      	movs	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	b004      	add	sp, #16
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40000400 	.word	0x40000400
 8002448:	40014000 	.word	0x40014000

0800244c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d021      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d01d      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2203      	movs	r2, #3
 800247a:	4252      	negs	r2, r2
 800247c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2203      	movs	r2, #3
 800248c:	4013      	ands	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 f9a4 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002498:	e007      	b.n	80024aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 f997 	bl	80027d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f9a3 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2204      	movs	r2, #4
 80024b4:	4013      	ands	r3, r2
 80024b6:	d022      	beq.n	80024fe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2204      	movs	r2, #4
 80024bc:	4013      	ands	r3, r2
 80024be:	d01e      	beq.n	80024fe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2205      	movs	r2, #5
 80024c6:	4252      	negs	r2, r2
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	23c0      	movs	r3, #192	@ 0xc0
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 f97d 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 80024e6:	e007      	b.n	80024f8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f970 	bl	80027d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 f97c 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2208      	movs	r2, #8
 8002502:	4013      	ands	r3, r2
 8002504:	d021      	beq.n	800254a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2208      	movs	r2, #8
 800250a:	4013      	ands	r3, r2
 800250c:	d01d      	beq.n	800254a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2209      	movs	r2, #9
 8002514:	4252      	negs	r2, r2
 8002516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2203      	movs	r2, #3
 8002526:	4013      	ands	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f000 f957 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002532:	e007      	b.n	8002544 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	0018      	movs	r0, r3
 8002538:	f000 f94a 	bl	80027d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	0018      	movs	r0, r3
 8002540:	f000 f956 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2210      	movs	r2, #16
 800254e:	4013      	ands	r3, r2
 8002550:	d022      	beq.n	8002598 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2210      	movs	r2, #16
 8002556:	4013      	ands	r3, r2
 8002558:	d01e      	beq.n	8002598 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2211      	movs	r2, #17
 8002560:	4252      	negs	r2, r2
 8002562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2208      	movs	r2, #8
 8002568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69da      	ldr	r2, [r3, #28]
 8002570:	23c0      	movs	r3, #192	@ 0xc0
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4013      	ands	r3, r2
 8002576:	d004      	beq.n	8002582 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	0018      	movs	r0, r3
 800257c:	f000 f930 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002580:	e007      	b.n	8002592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	0018      	movs	r0, r3
 8002586:	f000 f923 	bl	80027d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0018      	movs	r0, r3
 800258e:	f000 f92f 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2201      	movs	r2, #1
 800259c:	4013      	ands	r3, r2
 800259e:	d00c      	beq.n	80025ba <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	d008      	beq.n	80025ba <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2202      	movs	r2, #2
 80025ae:	4252      	negs	r2, r2
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7fd ffc3 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	4013      	ands	r3, r2
 80025c0:	d00c      	beq.n	80025dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	4013      	ands	r3, r2
 80025c8:	d008      	beq.n	80025dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2281      	movs	r2, #129	@ 0x81
 80025d0:	4252      	negs	r2, r2
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 fa98 	bl	8002b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2240      	movs	r2, #64	@ 0x40
 80025e0:	4013      	ands	r3, r2
 80025e2:	d00c      	beq.n	80025fe <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2240      	movs	r2, #64	@ 0x40
 80025e8:	4013      	ands	r3, r2
 80025ea:	d008      	beq.n	80025fe <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2241      	movs	r2, #65	@ 0x41
 80025f2:	4252      	negs	r2, r2
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f901 	bl	8002800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2220      	movs	r2, #32
 8002602:	4013      	ands	r3, r2
 8002604:	d00c      	beq.n	8002620 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	4013      	ands	r3, r2
 800260c:	d008      	beq.n	8002620 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2221      	movs	r2, #33	@ 0x21
 8002614:	4252      	negs	r2, r2
 8002616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fa6e 	bl	8002afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	230f      	movs	r3, #15
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	223c      	movs	r2, #60	@ 0x3c
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_TIM_ConfigClockSource+0x20>
 8002644:	2302      	movs	r3, #2
 8002646:	e0bc      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x19a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	223c      	movs	r2, #60	@ 0x3c
 800264c:	2101      	movs	r1, #1
 800264e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	223d      	movs	r2, #61	@ 0x3d
 8002654:	2102      	movs	r1, #2
 8002656:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2277      	movs	r2, #119	@ 0x77
 8002664:	4393      	bics	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4a58      	ldr	r2, [pc, #352]	@ (80027cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2280      	movs	r2, #128	@ 0x80
 800267e:	0192      	lsls	r2, r2, #6
 8002680:	4293      	cmp	r3, r2
 8002682:	d040      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0xde>
 8002684:	2280      	movs	r2, #128	@ 0x80
 8002686:	0192      	lsls	r2, r2, #6
 8002688:	4293      	cmp	r3, r2
 800268a:	d900      	bls.n	800268e <HAL_TIM_ConfigClockSource+0x66>
 800268c:	e088      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 800268e:	2280      	movs	r2, #128	@ 0x80
 8002690:	0152      	lsls	r2, r2, #5
 8002692:	4293      	cmp	r3, r2
 8002694:	d100      	bne.n	8002698 <HAL_TIM_ConfigClockSource+0x70>
 8002696:	e088      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x182>
 8002698:	2280      	movs	r2, #128	@ 0x80
 800269a:	0152      	lsls	r2, r2, #5
 800269c:	4293      	cmp	r3, r2
 800269e:	d900      	bls.n	80026a2 <HAL_TIM_ConfigClockSource+0x7a>
 80026a0:	e07e      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026a2:	2b70      	cmp	r3, #112	@ 0x70
 80026a4:	d018      	beq.n	80026d8 <HAL_TIM_ConfigClockSource+0xb0>
 80026a6:	d900      	bls.n	80026aa <HAL_TIM_ConfigClockSource+0x82>
 80026a8:	e07a      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026aa:	2b60      	cmp	r3, #96	@ 0x60
 80026ac:	d04f      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x126>
 80026ae:	d900      	bls.n	80026b2 <HAL_TIM_ConfigClockSource+0x8a>
 80026b0:	e076      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026b2:	2b50      	cmp	r3, #80	@ 0x50
 80026b4:	d03b      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x106>
 80026b6:	d900      	bls.n	80026ba <HAL_TIM_ConfigClockSource+0x92>
 80026b8:	e072      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026ba:	2b40      	cmp	r3, #64	@ 0x40
 80026bc:	d057      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x146>
 80026be:	d900      	bls.n	80026c2 <HAL_TIM_ConfigClockSource+0x9a>
 80026c0:	e06e      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026c2:	2b30      	cmp	r3, #48	@ 0x30
 80026c4:	d063      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026c6:	d86b      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d060      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026cc:	d868      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d05d      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d05b      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026d6:	e063      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026e8:	f000 f990 	bl	8002a0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2277      	movs	r2, #119	@ 0x77
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	609a      	str	r2, [r3, #8]
      break;
 8002704:	e052      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002716:	f000 f979 	bl	8002a0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2180      	movs	r1, #128	@ 0x80
 8002726:	01c9      	lsls	r1, r1, #7
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
      break;
 800272c:	e03e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800273a:	001a      	movs	r2, r3
 800273c:	f000 f8ec 	bl	8002918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2150      	movs	r1, #80	@ 0x50
 8002746:	0018      	movs	r0, r3
 8002748:	f000 f946 	bl	80029d8 <TIM_ITRx_SetConfig>
      break;
 800274c:	e02e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800275a:	001a      	movs	r2, r3
 800275c:	f000 f90a 	bl	8002974 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2160      	movs	r1, #96	@ 0x60
 8002766:	0018      	movs	r0, r3
 8002768:	f000 f936 	bl	80029d8 <TIM_ITRx_SetConfig>
      break;
 800276c:	e01e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800277a:	001a      	movs	r2, r3
 800277c:	f000 f8cc 	bl	8002918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2140      	movs	r1, #64	@ 0x40
 8002786:	0018      	movs	r0, r3
 8002788:	f000 f926 	bl	80029d8 <TIM_ITRx_SetConfig>
      break;
 800278c:	e00e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0019      	movs	r1, r3
 8002798:	0010      	movs	r0, r2
 800279a:	f000 f91d 	bl	80029d8 <TIM_ITRx_SetConfig>
      break;
 800279e:	e005      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80027a0:	230f      	movs	r3, #15
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
      break;
 80027a8:	e000      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80027aa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	223d      	movs	r2, #61	@ 0x3d
 80027b0:	2101      	movs	r1, #1
 80027b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	223c      	movs	r2, #60	@ 0x3c
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

  return status;
 80027bc:	230f      	movs	r3, #15
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	ffff00ff 	.word	0xffff00ff

080027d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d8:	46c0      	nop			@ (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f8:	46c0      	nop			@ (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002808:	46c0      	nop			@ (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}

08002810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a36      	ldr	r2, [pc, #216]	@ (80028fc <TIM_Base_SetConfig+0xec>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d003      	beq.n	8002830 <TIM_Base_SetConfig+0x20>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a35      	ldr	r2, [pc, #212]	@ (8002900 <TIM_Base_SetConfig+0xf0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2270      	movs	r2, #112	@ 0x70
 8002834:	4393      	bics	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2d      	ldr	r2, [pc, #180]	@ (80028fc <TIM_Base_SetConfig+0xec>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <TIM_Base_SetConfig+0x62>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2c      	ldr	r2, [pc, #176]	@ (8002900 <TIM_Base_SetConfig+0xf0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00f      	beq.n	8002872 <TIM_Base_SetConfig+0x62>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2b      	ldr	r2, [pc, #172]	@ (8002904 <TIM_Base_SetConfig+0xf4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00b      	beq.n	8002872 <TIM_Base_SetConfig+0x62>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2a      	ldr	r2, [pc, #168]	@ (8002908 <TIM_Base_SetConfig+0xf8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <TIM_Base_SetConfig+0x62>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a29      	ldr	r2, [pc, #164]	@ (800290c <TIM_Base_SetConfig+0xfc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <TIM_Base_SetConfig+0x62>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a28      	ldr	r2, [pc, #160]	@ (8002910 <TIM_Base_SetConfig+0x100>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d108      	bne.n	8002884 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a27      	ldr	r2, [pc, #156]	@ (8002914 <TIM_Base_SetConfig+0x104>)
 8002876:	4013      	ands	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2280      	movs	r2, #128	@ 0x80
 8002888:	4393      	bics	r3, r2
 800288a:	001a      	movs	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a13      	ldr	r2, [pc, #76]	@ (80028fc <TIM_Base_SetConfig+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00b      	beq.n	80028ca <TIM_Base_SetConfig+0xba>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a14      	ldr	r2, [pc, #80]	@ (8002908 <TIM_Base_SetConfig+0xf8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <TIM_Base_SetConfig+0xba>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a13      	ldr	r2, [pc, #76]	@ (800290c <TIM_Base_SetConfig+0xfc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <TIM_Base_SetConfig+0xba>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a12      	ldr	r2, [pc, #72]	@ (8002910 <TIM_Base_SetConfig+0x100>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d103      	bne.n	80028d2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2201      	movs	r2, #1
 80028ea:	4393      	bics	r3, r2
 80028ec:	001a      	movs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]
  }
}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b004      	add	sp, #16
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400
 8002904:	40002000 	.word	0x40002000
 8002908:	40014000 	.word	0x40014000
 800290c:	40014400 	.word	0x40014400
 8002910:	40014800 	.word	0x40014800
 8002914:	fffffcff 	.word	0xfffffcff

08002918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	2201      	movs	r2, #1
 8002930:	4393      	bics	r3, r2
 8002932:	001a      	movs	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	22f0      	movs	r2, #240	@ 0xf0
 8002942:	4393      	bics	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	220a      	movs	r2, #10
 8002954:	4393      	bics	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	621a      	str	r2, [r3, #32]
}
 800296c:	46c0      	nop			@ (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b006      	add	sp, #24
 8002972:	bd80      	pop	{r7, pc}

08002974 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	2210      	movs	r2, #16
 800298c:	4393      	bics	r3, r2
 800298e:	001a      	movs	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4a0d      	ldr	r2, [pc, #52]	@ (80029d4 <TIM_TI2_ConfigInputStage+0x60>)
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	031b      	lsls	r3, r3, #12
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	22a0      	movs	r2, #160	@ 0xa0
 80029b0:	4393      	bics	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b006      	add	sp, #24
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	ffff0fff 	.word	0xffff0fff

080029d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2270      	movs	r2, #112	@ 0x70
 80029ec:	4393      	bics	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	2207      	movs	r2, #7
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	609a      	str	r2, [r3, #8]
}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b004      	add	sp, #16
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4a09      	ldr	r2, [pc, #36]	@ (8002a48 <TIM_ETR_SetConfig+0x3c>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	021a      	lsls	r2, r3, #8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b006      	add	sp, #24
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	ffff00ff 	.word	0xffff00ff

08002a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	223c      	movs	r2, #60	@ 0x3c
 8002a5a:	5c9b      	ldrb	r3, [r3, r2]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e041      	b.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	223c      	movs	r2, #60	@ 0x3c
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	223d      	movs	r2, #61	@ 0x3d
 8002a70:	2102      	movs	r1, #2
 8002a72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2270      	movs	r2, #112	@ 0x70
 8002a88:	4393      	bics	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a11      	ldr	r2, [pc, #68]	@ (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a10      	ldr	r2, [pc, #64]	@ (8002af8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10c      	bne.n	8002ad6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2280      	movs	r2, #128	@ 0x80
 8002ac0:	4393      	bics	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	223d      	movs	r2, #61	@ 0x3d
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	223c      	movs	r2, #60	@ 0x3c
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b004      	add	sp, #16
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40014000 	.word	0x40014000

08002afc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b04:	46c0      	nop			@ (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e044      	b.n	8002bb8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2278      	movs	r2, #120	@ 0x78
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fd ff09 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2224      	movs	r2, #36	@ 0x24
 8002b4a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2101      	movs	r1, #1
 8002b58:	438a      	bics	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 fa24 	bl	8002fb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 f8c8 	bl	8002d04 <UART_SetConfig>
 8002b74:	0003      	movs	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e01c      	b.n	8002bb8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	490d      	ldr	r1, [pc, #52]	@ (8002bc0 <HAL_UART_Init+0xa4>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2108      	movs	r1, #8
 8002b9a:	438a      	bics	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 fab3 	bl	800311c <UART_CheckIdleState>
 8002bb6:	0003      	movs	r3, r0
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	fffff7ff 	.word	0xfffff7ff

08002bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	@ 0x28
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	1dbb      	adds	r3, r7, #6
 8002bd2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d000      	beq.n	8002bde <HAL_UART_Transmit+0x1a>
 8002bdc:	e08c      	b.n	8002cf8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_UART_Transmit+0x28>
 8002be4:	1dbb      	adds	r3, r7, #6
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e084      	b.n	8002cfa <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	015b      	lsls	r3, r3, #5
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d109      	bne.n	8002c10 <HAL_UART_Transmit+0x4c>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2201      	movs	r2, #1
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d001      	beq.n	8002c10 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e074      	b.n	8002cfa <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2284      	movs	r2, #132	@ 0x84
 8002c14:	2100      	movs	r1, #0
 8002c16:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2221      	movs	r2, #33	@ 0x21
 8002c1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c1e:	f7fd ff6b 	bl	8000af8 <HAL_GetTick>
 8002c22:	0003      	movs	r3, r0
 8002c24:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1dba      	adds	r2, r7, #6
 8002c2a:	2150      	movs	r1, #80	@ 0x50
 8002c2c:	8812      	ldrh	r2, [r2, #0]
 8002c2e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1dba      	adds	r2, r7, #6
 8002c34:	2152      	movs	r1, #82	@ 0x52
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	015b      	lsls	r3, r3, #5
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d108      	bne.n	8002c58 <HAL_UART_Transmit+0x94>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	e003      	b.n	8002c60 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c60:	e02f      	b.n	8002cc2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	0013      	movs	r3, r2
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	@ 0x80
 8002c70:	f000 fafc 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e03b      	b.n	8002cfa <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	881a      	ldrh	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	05d2      	lsls	r2, r2, #23
 8002c92:	0dd2      	lsrs	r2, r2, #23
 8002c94:	b292      	uxth	r2, r2
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e007      	b.n	8002cb0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3301      	adds	r3, #1
 8002cae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2252      	movs	r2, #82	@ 0x52
 8002cb4:	5a9b      	ldrh	r3, [r3, r2]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b299      	uxth	r1, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2252      	movs	r2, #82	@ 0x52
 8002cc0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2252      	movs	r2, #82	@ 0x52
 8002cc6:	5a9b      	ldrh	r3, [r3, r2]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1c9      	bne.n	8002c62 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	0013      	movs	r3, r2
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2140      	movs	r1, #64	@ 0x40
 8002cdc:	f000 fac6 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 8002ce0:	1e03      	subs	r3, r0, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e005      	b.n	8002cfa <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b008      	add	sp, #32
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d0c:	231e      	movs	r3, #30
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a97      	ldr	r2, [pc, #604]	@ (8002f90 <UART_SetConfig+0x28c>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	0019      	movs	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a92      	ldr	r2, [pc, #584]	@ (8002f94 <UART_SetConfig+0x290>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a89      	ldr	r2, [pc, #548]	@ (8002f98 <UART_SetConfig+0x294>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a85      	ldr	r2, [pc, #532]	@ (8002f9c <UART_SetConfig+0x298>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d127      	bne.n	8002dda <UART_SetConfig+0xd6>
 8002d8a:	4b85      	ldr	r3, [pc, #532]	@ (8002fa0 <UART_SetConfig+0x29c>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	2203      	movs	r2, #3
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d00d      	beq.n	8002db2 <UART_SetConfig+0xae>
 8002d96:	d81b      	bhi.n	8002dd0 <UART_SetConfig+0xcc>
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d014      	beq.n	8002dc6 <UART_SetConfig+0xc2>
 8002d9c:	d818      	bhi.n	8002dd0 <UART_SetConfig+0xcc>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <UART_SetConfig+0xa4>
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d00a      	beq.n	8002dbc <UART_SetConfig+0xb8>
 8002da6:	e013      	b.n	8002dd0 <UART_SetConfig+0xcc>
 8002da8:	231f      	movs	r3, #31
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e035      	b.n	8002e1e <UART_SetConfig+0x11a>
 8002db2:	231f      	movs	r3, #31
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2202      	movs	r2, #2
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e030      	b.n	8002e1e <UART_SetConfig+0x11a>
 8002dbc:	231f      	movs	r3, #31
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e02b      	b.n	8002e1e <UART_SetConfig+0x11a>
 8002dc6:	231f      	movs	r3, #31
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2208      	movs	r2, #8
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e026      	b.n	8002e1e <UART_SetConfig+0x11a>
 8002dd0:	231f      	movs	r3, #31
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e021      	b.n	8002e1e <UART_SetConfig+0x11a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a71      	ldr	r2, [pc, #452]	@ (8002fa4 <UART_SetConfig+0x2a0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d104      	bne.n	8002dee <UART_SetConfig+0xea>
 8002de4:	231f      	movs	r3, #31
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e017      	b.n	8002e1e <UART_SetConfig+0x11a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6d      	ldr	r2, [pc, #436]	@ (8002fa8 <UART_SetConfig+0x2a4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d104      	bne.n	8002e02 <UART_SetConfig+0xfe>
 8002df8:	231f      	movs	r3, #31
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e00d      	b.n	8002e1e <UART_SetConfig+0x11a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a69      	ldr	r2, [pc, #420]	@ (8002fac <UART_SetConfig+0x2a8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d104      	bne.n	8002e16 <UART_SetConfig+0x112>
 8002e0c:	231f      	movs	r3, #31
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e003      	b.n	8002e1e <UART_SetConfig+0x11a>
 8002e16:	231f      	movs	r3, #31
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	2380      	movs	r3, #128	@ 0x80
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d15c      	bne.n	8002ee4 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8002e2a:	231f      	movs	r3, #31
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d015      	beq.n	8002e60 <UART_SetConfig+0x15c>
 8002e34:	dc18      	bgt.n	8002e68 <UART_SetConfig+0x164>
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d00d      	beq.n	8002e56 <UART_SetConfig+0x152>
 8002e3a:	dc15      	bgt.n	8002e68 <UART_SetConfig+0x164>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <UART_SetConfig+0x142>
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d005      	beq.n	8002e50 <UART_SetConfig+0x14c>
 8002e44:	e010      	b.n	8002e68 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e46:	f7ff fa4f 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	61bb      	str	r3, [r7, #24]
        break;
 8002e4e:	e012      	b.n	8002e76 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e50:	4b57      	ldr	r3, [pc, #348]	@ (8002fb0 <UART_SetConfig+0x2ac>)
 8002e52:	61bb      	str	r3, [r7, #24]
        break;
 8002e54:	e00f      	b.n	8002e76 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e56:	f7ff f9e5 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	61bb      	str	r3, [r7, #24]
        break;
 8002e5e:	e00a      	b.n	8002e76 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	61bb      	str	r3, [r7, #24]
        break;
 8002e66:	e006      	b.n	8002e76 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e6c:	231e      	movs	r3, #30
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
        break;
 8002e74:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d100      	bne.n	8002e7e <UART_SetConfig+0x17a>
 8002e7c:	e07a      	b.n	8002f74 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	005a      	lsls	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	18d2      	adds	r2, r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0019      	movs	r1, r3
 8002e90:	0010      	movs	r0, r2
 8002e92:	f7fd f943 	bl	800011c <__udivsi3>
 8002e96:	0003      	movs	r3, r0
 8002e98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b0f      	cmp	r3, #15
 8002e9e:	d91c      	bls.n	8002eda <UART_SetConfig+0x1d6>
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	2380      	movs	r3, #128	@ 0x80
 8002ea4:	025b      	lsls	r3, r3, #9
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d217      	bcs.n	8002eda <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	200e      	movs	r0, #14
 8002eb0:	183b      	adds	r3, r7, r0
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	b299      	uxth	r1, r3
 8002ec4:	183b      	adds	r3, r7, r0
 8002ec6:	183a      	adds	r2, r7, r0
 8002ec8:	8812      	ldrh	r2, [r2, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	183a      	adds	r2, r7, r0
 8002ed4:	8812      	ldrh	r2, [r2, #0]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	e04c      	b.n	8002f74 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8002eda:	231e      	movs	r3, #30
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e047      	b.n	8002f74 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ee4:	231f      	movs	r3, #31
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d015      	beq.n	8002f1a <UART_SetConfig+0x216>
 8002eee:	dc18      	bgt.n	8002f22 <UART_SetConfig+0x21e>
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d00d      	beq.n	8002f10 <UART_SetConfig+0x20c>
 8002ef4:	dc15      	bgt.n	8002f22 <UART_SetConfig+0x21e>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <UART_SetConfig+0x1fc>
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d005      	beq.n	8002f0a <UART_SetConfig+0x206>
 8002efe:	e010      	b.n	8002f22 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f00:	f7ff f9f2 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8002f04:	0003      	movs	r3, r0
 8002f06:	61bb      	str	r3, [r7, #24]
        break;
 8002f08:	e012      	b.n	8002f30 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f0a:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <UART_SetConfig+0x2ac>)
 8002f0c:	61bb      	str	r3, [r7, #24]
        break;
 8002f0e:	e00f      	b.n	8002f30 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f10:	f7ff f988 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8002f14:	0003      	movs	r3, r0
 8002f16:	61bb      	str	r3, [r7, #24]
        break;
 8002f18:	e00a      	b.n	8002f30 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	61bb      	str	r3, [r7, #24]
        break;
 8002f20:	e006      	b.n	8002f30 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f26:	231e      	movs	r3, #30
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
        break;
 8002f2e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01e      	beq.n	8002f74 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	085a      	lsrs	r2, r3, #1
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	18d2      	adds	r2, r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0019      	movs	r1, r3
 8002f46:	0010      	movs	r0, r2
 8002f48:	f7fd f8e8 	bl	800011c <__udivsi3>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	d90a      	bls.n	8002f6c <UART_SetConfig+0x268>
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	025b      	lsls	r3, r3, #9
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d205      	bcs.n	8002f6c <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	e003      	b.n	8002f74 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8002f6c:	231e      	movs	r3, #30
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002f80:	231e      	movs	r3, #30
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	781b      	ldrb	r3, [r3, #0]
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b008      	add	sp, #32
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	efff69f3 	.word	0xefff69f3
 8002f94:	ffffcfff 	.word	0xffffcfff
 8002f98:	fffff4ff 	.word	0xfffff4ff
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40004400 	.word	0x40004400
 8002fa8:	40004800 	.word	0x40004800
 8002fac:	40004c00 	.word	0x40004c00
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80030f8 <UART_AdvFeatureConfig+0x144>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a43      	ldr	r2, [pc, #268]	@ (80030fc <UART_AdvFeatureConfig+0x148>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	2202      	movs	r2, #2
 8003006:	4013      	ands	r3, r2
 8003008:	d00b      	beq.n	8003022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a3b      	ldr	r2, [pc, #236]	@ (8003100 <UART_AdvFeatureConfig+0x14c>)
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	2204      	movs	r2, #4
 8003028:	4013      	ands	r3, r2
 800302a:	d00b      	beq.n	8003044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4a34      	ldr	r2, [pc, #208]	@ (8003104 <UART_AdvFeatureConfig+0x150>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	2210      	movs	r2, #16
 800304a:	4013      	ands	r3, r2
 800304c:	d00b      	beq.n	8003066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a2c      	ldr	r2, [pc, #176]	@ (8003108 <UART_AdvFeatureConfig+0x154>)
 8003056:	4013      	ands	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	2220      	movs	r2, #32
 800306c:	4013      	ands	r3, r2
 800306e:	d00b      	beq.n	8003088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4a25      	ldr	r2, [pc, #148]	@ (800310c <UART_AdvFeatureConfig+0x158>)
 8003078:	4013      	ands	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	2240      	movs	r2, #64	@ 0x40
 800308e:	4013      	ands	r3, r2
 8003090:	d01d      	beq.n	80030ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a1d      	ldr	r2, [pc, #116]	@ (8003110 <UART_AdvFeatureConfig+0x15c>)
 800309a:	4013      	ands	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	035b      	lsls	r3, r3, #13
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d10b      	bne.n	80030ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a15      	ldr	r2, [pc, #84]	@ (8003114 <UART_AdvFeatureConfig+0x160>)
 80030be:	4013      	ands	r3, r2
 80030c0:	0019      	movs	r1, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	2280      	movs	r2, #128	@ 0x80
 80030d4:	4013      	ands	r3, r2
 80030d6:	d00b      	beq.n	80030f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4a0e      	ldr	r2, [pc, #56]	@ (8003118 <UART_AdvFeatureConfig+0x164>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }
}
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	ffff7fff 	.word	0xffff7fff
 80030fc:	fffdffff 	.word	0xfffdffff
 8003100:	fffeffff 	.word	0xfffeffff
 8003104:	fffbffff 	.word	0xfffbffff
 8003108:	ffffefff 	.word	0xffffefff
 800310c:	ffffdfff 	.word	0xffffdfff
 8003110:	ffefffff 	.word	0xffefffff
 8003114:	ff9fffff 	.word	0xff9fffff
 8003118:	fff7ffff 	.word	0xfff7ffff

0800311c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b092      	sub	sp, #72	@ 0x48
 8003120:	af02      	add	r7, sp, #8
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2284      	movs	r2, #132	@ 0x84
 8003128:	2100      	movs	r1, #0
 800312a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800312c:	f7fd fce4 	bl	8000af8 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2208      	movs	r2, #8
 800313c:	4013      	ands	r3, r2
 800313e:	2b08      	cmp	r3, #8
 8003140:	d12c      	bne.n	800319c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003144:	2280      	movs	r2, #128	@ 0x80
 8003146:	0391      	lsls	r1, r2, #14
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4a46      	ldr	r2, [pc, #280]	@ (8003264 <UART_CheckIdleState+0x148>)
 800314c:	9200      	str	r2, [sp, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	f000 f88c 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d021      	beq.n	800319c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003158:	f3ef 8310 	mrs	r3, PRIMASK
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003162:	2301      	movs	r3, #1
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003168:	f383 8810 	msr	PRIMASK, r3
}
 800316c:	46c0      	nop			@ (mov r8, r8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2180      	movs	r1, #128	@ 0x80
 800317a:	438a      	bics	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003184:	f383 8810 	msr	PRIMASK, r3
}
 8003188:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2278      	movs	r2, #120	@ 0x78
 8003194:	2100      	movs	r1, #0
 8003196:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e05f      	b.n	800325c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2204      	movs	r2, #4
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d146      	bne.n	8003238 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ac:	2280      	movs	r2, #128	@ 0x80
 80031ae:	03d1      	lsls	r1, r2, #15
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003264 <UART_CheckIdleState+0x148>)
 80031b4:	9200      	str	r2, [sp, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f000 f858 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 80031bc:	1e03      	subs	r3, r0, #0
 80031be:	d03b      	beq.n	8003238 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c0:	f3ef 8310 	mrs	r3, PRIMASK
 80031c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80031c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ca:	2301      	movs	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f383 8810 	msr	PRIMASK, r3
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4921      	ldr	r1, [pc, #132]	@ (8003268 <UART_CheckIdleState+0x14c>)
 80031e2:	400a      	ands	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f383 8810 	msr	PRIMASK, r3
}
 80031f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f2:	f3ef 8310 	mrs	r3, PRIMASK
 80031f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80031f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80031fc:	2301      	movs	r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f383 8810 	msr	PRIMASK, r3
}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2101      	movs	r1, #1
 8003214:	438a      	bics	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	f383 8810 	msr	PRIMASK, r3
}
 8003222:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2280      	movs	r2, #128	@ 0x80
 8003228:	2120      	movs	r1, #32
 800322a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2278      	movs	r2, #120	@ 0x78
 8003230:	2100      	movs	r1, #0
 8003232:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e011      	b.n	800325c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2280      	movs	r2, #128	@ 0x80
 8003242:	2120      	movs	r1, #32
 8003244:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2278      	movs	r2, #120	@ 0x78
 8003256:	2100      	movs	r1, #0
 8003258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b010      	add	sp, #64	@ 0x40
 8003262:	bd80      	pop	{r7, pc}
 8003264:	01ffffff 	.word	0x01ffffff
 8003268:	fffffedf 	.word	0xfffffedf

0800326c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	1dfb      	adds	r3, r7, #7
 800327a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327c:	e051      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	3301      	adds	r3, #1
 8003282:	d04e      	beq.n	8003322 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003284:	f7fd fc38 	bl	8000af8 <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e051      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2204      	movs	r2, #4
 80032a6:	4013      	ands	r3, r2
 80032a8:	d03b      	beq.n	8003322 <UART_WaitOnFlagUntilTimeout+0xb6>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b80      	cmp	r3, #128	@ 0x80
 80032ae:	d038      	beq.n	8003322 <UART_WaitOnFlagUntilTimeout+0xb6>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b40      	cmp	r3, #64	@ 0x40
 80032b4:	d035      	beq.n	8003322 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2208      	movs	r2, #8
 80032be:	4013      	ands	r3, r2
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d111      	bne.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2208      	movs	r2, #8
 80032ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f83c 	bl	800334c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2284      	movs	r2, #132	@ 0x84
 80032d8:	2108      	movs	r1, #8
 80032da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2278      	movs	r2, #120	@ 0x78
 80032e0:	2100      	movs	r1, #0
 80032e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e02c      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	401a      	ands	r2, r3
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d112      	bne.n	8003322 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2280      	movs	r2, #128	@ 0x80
 8003302:	0112      	lsls	r2, r2, #4
 8003304:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 f81f 	bl	800334c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2284      	movs	r2, #132	@ 0x84
 8003312:	2120      	movs	r1, #32
 8003314:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2278      	movs	r2, #120	@ 0x78
 800331a:	2100      	movs	r1, #0
 800331c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e00f      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	425a      	negs	r2, r3
 8003332:	4153      	adcs	r3, r2
 8003334:	b2db      	uxtb	r3, r3
 8003336:	001a      	movs	r2, r3
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d09e      	beq.n	800327e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	0018      	movs	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	b004      	add	sp, #16
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08e      	sub	sp, #56	@ 0x38
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003354:	f3ef 8310 	mrs	r3, PRIMASK
 8003358:	617b      	str	r3, [r7, #20]
  return(result);
 800335a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335c:	637b      	str	r3, [r7, #52]	@ 0x34
 800335e:	2301      	movs	r3, #1
 8003360:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4926      	ldr	r1, [pc, #152]	@ (8003410 <UART_EndRxTransfer+0xc4>)
 8003376:	400a      	ands	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	623b      	str	r3, [r7, #32]
  return(result);
 800338c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003390:	2301      	movs	r3, #1
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	438a      	bics	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d118      	bne.n	80033f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c0:	f3ef 8310 	mrs	r3, PRIMASK
 80033c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80033c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ca:	2301      	movs	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f383 8810 	msr	PRIMASK, r3
}
 80033d4:	46c0      	nop			@ (mov r8, r8)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2110      	movs	r1, #16
 80033e2:	438a      	bics	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2280      	movs	r2, #128	@ 0x80
 80033f6:	2120      	movs	r1, #32
 80033f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b00e      	add	sp, #56	@ 0x38
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	fffffedf 	.word	0xfffffedf

08003414 <std>:
 8003414:	2300      	movs	r3, #0
 8003416:	b510      	push	{r4, lr}
 8003418:	0004      	movs	r4, r0
 800341a:	6003      	str	r3, [r0, #0]
 800341c:	6043      	str	r3, [r0, #4]
 800341e:	6083      	str	r3, [r0, #8]
 8003420:	8181      	strh	r1, [r0, #12]
 8003422:	6643      	str	r3, [r0, #100]	@ 0x64
 8003424:	81c2      	strh	r2, [r0, #14]
 8003426:	6103      	str	r3, [r0, #16]
 8003428:	6143      	str	r3, [r0, #20]
 800342a:	6183      	str	r3, [r0, #24]
 800342c:	0019      	movs	r1, r3
 800342e:	2208      	movs	r2, #8
 8003430:	305c      	adds	r0, #92	@ 0x5c
 8003432:	f000 fa0f 	bl	8003854 <memset>
 8003436:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <std+0x50>)
 8003438:	6224      	str	r4, [r4, #32]
 800343a:	6263      	str	r3, [r4, #36]	@ 0x24
 800343c:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <std+0x54>)
 800343e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003440:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <std+0x58>)
 8003442:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003444:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <std+0x5c>)
 8003446:	6323      	str	r3, [r4, #48]	@ 0x30
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <std+0x60>)
 800344a:	429c      	cmp	r4, r3
 800344c:	d005      	beq.n	800345a <std+0x46>
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <std+0x64>)
 8003450:	429c      	cmp	r4, r3
 8003452:	d002      	beq.n	800345a <std+0x46>
 8003454:	4b09      	ldr	r3, [pc, #36]	@ (800347c <std+0x68>)
 8003456:	429c      	cmp	r4, r3
 8003458:	d103      	bne.n	8003462 <std+0x4e>
 800345a:	0020      	movs	r0, r4
 800345c:	3058      	adds	r0, #88	@ 0x58
 800345e:	f000 fa79 	bl	8003954 <__retarget_lock_init_recursive>
 8003462:	bd10      	pop	{r4, pc}
 8003464:	0800367d 	.word	0x0800367d
 8003468:	080036a5 	.word	0x080036a5
 800346c:	080036dd 	.word	0x080036dd
 8003470:	08003709 	.word	0x08003709
 8003474:	200001a0 	.word	0x200001a0
 8003478:	20000208 	.word	0x20000208
 800347c:	20000270 	.word	0x20000270

08003480 <stdio_exit_handler>:
 8003480:	b510      	push	{r4, lr}
 8003482:	4a03      	ldr	r2, [pc, #12]	@ (8003490 <stdio_exit_handler+0x10>)
 8003484:	4903      	ldr	r1, [pc, #12]	@ (8003494 <stdio_exit_handler+0x14>)
 8003486:	4804      	ldr	r0, [pc, #16]	@ (8003498 <stdio_exit_handler+0x18>)
 8003488:	f000 f86c 	bl	8003564 <_fwalk_sglue>
 800348c:	bd10      	pop	{r4, pc}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	2000000c 	.word	0x2000000c
 8003494:	080041e1 	.word	0x080041e1
 8003498:	2000001c 	.word	0x2000001c

0800349c <cleanup_stdio>:
 800349c:	6841      	ldr	r1, [r0, #4]
 800349e:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <cleanup_stdio+0x30>)
 80034a0:	b510      	push	{r4, lr}
 80034a2:	0004      	movs	r4, r0
 80034a4:	4299      	cmp	r1, r3
 80034a6:	d001      	beq.n	80034ac <cleanup_stdio+0x10>
 80034a8:	f000 fe9a 	bl	80041e0 <_fflush_r>
 80034ac:	68a1      	ldr	r1, [r4, #8]
 80034ae:	4b08      	ldr	r3, [pc, #32]	@ (80034d0 <cleanup_stdio+0x34>)
 80034b0:	4299      	cmp	r1, r3
 80034b2:	d002      	beq.n	80034ba <cleanup_stdio+0x1e>
 80034b4:	0020      	movs	r0, r4
 80034b6:	f000 fe93 	bl	80041e0 <_fflush_r>
 80034ba:	68e1      	ldr	r1, [r4, #12]
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <cleanup_stdio+0x38>)
 80034be:	4299      	cmp	r1, r3
 80034c0:	d002      	beq.n	80034c8 <cleanup_stdio+0x2c>
 80034c2:	0020      	movs	r0, r4
 80034c4:	f000 fe8c 	bl	80041e0 <_fflush_r>
 80034c8:	bd10      	pop	{r4, pc}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	200001a0 	.word	0x200001a0
 80034d0:	20000208 	.word	0x20000208
 80034d4:	20000270 	.word	0x20000270

080034d8 <global_stdio_init.part.0>:
 80034d8:	b510      	push	{r4, lr}
 80034da:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <global_stdio_init.part.0+0x28>)
 80034dc:	4a09      	ldr	r2, [pc, #36]	@ (8003504 <global_stdio_init.part.0+0x2c>)
 80034de:	2104      	movs	r1, #4
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	4809      	ldr	r0, [pc, #36]	@ (8003508 <global_stdio_init.part.0+0x30>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	f7ff ff95 	bl	8003414 <std>
 80034ea:	2201      	movs	r2, #1
 80034ec:	2109      	movs	r1, #9
 80034ee:	4807      	ldr	r0, [pc, #28]	@ (800350c <global_stdio_init.part.0+0x34>)
 80034f0:	f7ff ff90 	bl	8003414 <std>
 80034f4:	2202      	movs	r2, #2
 80034f6:	2112      	movs	r1, #18
 80034f8:	4805      	ldr	r0, [pc, #20]	@ (8003510 <global_stdio_init.part.0+0x38>)
 80034fa:	f7ff ff8b 	bl	8003414 <std>
 80034fe:	bd10      	pop	{r4, pc}
 8003500:	200002d8 	.word	0x200002d8
 8003504:	08003481 	.word	0x08003481
 8003508:	200001a0 	.word	0x200001a0
 800350c:	20000208 	.word	0x20000208
 8003510:	20000270 	.word	0x20000270

08003514 <__sfp_lock_acquire>:
 8003514:	b510      	push	{r4, lr}
 8003516:	4802      	ldr	r0, [pc, #8]	@ (8003520 <__sfp_lock_acquire+0xc>)
 8003518:	f000 fa1d 	bl	8003956 <__retarget_lock_acquire_recursive>
 800351c:	bd10      	pop	{r4, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	200002e1 	.word	0x200002e1

08003524 <__sfp_lock_release>:
 8003524:	b510      	push	{r4, lr}
 8003526:	4802      	ldr	r0, [pc, #8]	@ (8003530 <__sfp_lock_release+0xc>)
 8003528:	f000 fa16 	bl	8003958 <__retarget_lock_release_recursive>
 800352c:	bd10      	pop	{r4, pc}
 800352e:	46c0      	nop			@ (mov r8, r8)
 8003530:	200002e1 	.word	0x200002e1

08003534 <__sinit>:
 8003534:	b510      	push	{r4, lr}
 8003536:	0004      	movs	r4, r0
 8003538:	f7ff ffec 	bl	8003514 <__sfp_lock_acquire>
 800353c:	6a23      	ldr	r3, [r4, #32]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <__sinit+0x14>
 8003542:	f7ff ffef 	bl	8003524 <__sfp_lock_release>
 8003546:	bd10      	pop	{r4, pc}
 8003548:	4b04      	ldr	r3, [pc, #16]	@ (800355c <__sinit+0x28>)
 800354a:	6223      	str	r3, [r4, #32]
 800354c:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <__sinit+0x2c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f6      	bne.n	8003542 <__sinit+0xe>
 8003554:	f7ff ffc0 	bl	80034d8 <global_stdio_init.part.0>
 8003558:	e7f3      	b.n	8003542 <__sinit+0xe>
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	0800349d 	.word	0x0800349d
 8003560:	200002d8 	.word	0x200002d8

08003564 <_fwalk_sglue>:
 8003564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003566:	0014      	movs	r4, r2
 8003568:	2600      	movs	r6, #0
 800356a:	9000      	str	r0, [sp, #0]
 800356c:	9101      	str	r1, [sp, #4]
 800356e:	68a5      	ldr	r5, [r4, #8]
 8003570:	6867      	ldr	r7, [r4, #4]
 8003572:	3f01      	subs	r7, #1
 8003574:	d504      	bpl.n	8003580 <_fwalk_sglue+0x1c>
 8003576:	6824      	ldr	r4, [r4, #0]
 8003578:	2c00      	cmp	r4, #0
 800357a:	d1f8      	bne.n	800356e <_fwalk_sglue+0xa>
 800357c:	0030      	movs	r0, r6
 800357e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003580:	89ab      	ldrh	r3, [r5, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d908      	bls.n	8003598 <_fwalk_sglue+0x34>
 8003586:	220e      	movs	r2, #14
 8003588:	5eab      	ldrsh	r3, [r5, r2]
 800358a:	3301      	adds	r3, #1
 800358c:	d004      	beq.n	8003598 <_fwalk_sglue+0x34>
 800358e:	0029      	movs	r1, r5
 8003590:	9800      	ldr	r0, [sp, #0]
 8003592:	9b01      	ldr	r3, [sp, #4]
 8003594:	4798      	blx	r3
 8003596:	4306      	orrs	r6, r0
 8003598:	3568      	adds	r5, #104	@ 0x68
 800359a:	e7ea      	b.n	8003572 <_fwalk_sglue+0xe>

0800359c <iprintf>:
 800359c:	b40f      	push	{r0, r1, r2, r3}
 800359e:	b507      	push	{r0, r1, r2, lr}
 80035a0:	4905      	ldr	r1, [pc, #20]	@ (80035b8 <iprintf+0x1c>)
 80035a2:	ab04      	add	r3, sp, #16
 80035a4:	6808      	ldr	r0, [r1, #0]
 80035a6:	cb04      	ldmia	r3!, {r2}
 80035a8:	6881      	ldr	r1, [r0, #8]
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	f000 fafa 	bl	8003ba4 <_vfiprintf_r>
 80035b0:	b003      	add	sp, #12
 80035b2:	bc08      	pop	{r3}
 80035b4:	b004      	add	sp, #16
 80035b6:	4718      	bx	r3
 80035b8:	20000018 	.word	0x20000018

080035bc <_puts_r>:
 80035bc:	6a03      	ldr	r3, [r0, #32]
 80035be:	b570      	push	{r4, r5, r6, lr}
 80035c0:	0005      	movs	r5, r0
 80035c2:	000e      	movs	r6, r1
 80035c4:	6884      	ldr	r4, [r0, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <_puts_r+0x12>
 80035ca:	f7ff ffb3 	bl	8003534 <__sinit>
 80035ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035d0:	07db      	lsls	r3, r3, #31
 80035d2:	d405      	bmi.n	80035e0 <_puts_r+0x24>
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	059b      	lsls	r3, r3, #22
 80035d8:	d402      	bmi.n	80035e0 <_puts_r+0x24>
 80035da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035dc:	f000 f9bb 	bl	8003956 <__retarget_lock_acquire_recursive>
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	071b      	lsls	r3, r3, #28
 80035e4:	d502      	bpl.n	80035ec <_puts_r+0x30>
 80035e6:	6923      	ldr	r3, [r4, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11f      	bne.n	800362c <_puts_r+0x70>
 80035ec:	0021      	movs	r1, r4
 80035ee:	0028      	movs	r0, r5
 80035f0:	f000 f8d2 	bl	8003798 <__swsetup_r>
 80035f4:	2800      	cmp	r0, #0
 80035f6:	d019      	beq.n	800362c <_puts_r+0x70>
 80035f8:	2501      	movs	r5, #1
 80035fa:	426d      	negs	r5, r5
 80035fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035fe:	07db      	lsls	r3, r3, #31
 8003600:	d405      	bmi.n	800360e <_puts_r+0x52>
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	059b      	lsls	r3, r3, #22
 8003606:	d402      	bmi.n	800360e <_puts_r+0x52>
 8003608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800360a:	f000 f9a5 	bl	8003958 <__retarget_lock_release_recursive>
 800360e:	0028      	movs	r0, r5
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	3601      	adds	r6, #1
 8003614:	60a3      	str	r3, [r4, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	da04      	bge.n	8003624 <_puts_r+0x68>
 800361a:	69a2      	ldr	r2, [r4, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	dc16      	bgt.n	800364e <_puts_r+0x92>
 8003620:	290a      	cmp	r1, #10
 8003622:	d014      	beq.n	800364e <_puts_r+0x92>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	6022      	str	r2, [r4, #0]
 800362a:	7019      	strb	r1, [r3, #0]
 800362c:	68a3      	ldr	r3, [r4, #8]
 800362e:	7831      	ldrb	r1, [r6, #0]
 8003630:	3b01      	subs	r3, #1
 8003632:	2900      	cmp	r1, #0
 8003634:	d1ed      	bne.n	8003612 <_puts_r+0x56>
 8003636:	60a3      	str	r3, [r4, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	da0f      	bge.n	800365c <_puts_r+0xa0>
 800363c:	0022      	movs	r2, r4
 800363e:	0028      	movs	r0, r5
 8003640:	310a      	adds	r1, #10
 8003642:	f000 f867 	bl	8003714 <__swbuf_r>
 8003646:	3001      	adds	r0, #1
 8003648:	d0d6      	beq.n	80035f8 <_puts_r+0x3c>
 800364a:	250a      	movs	r5, #10
 800364c:	e7d6      	b.n	80035fc <_puts_r+0x40>
 800364e:	0022      	movs	r2, r4
 8003650:	0028      	movs	r0, r5
 8003652:	f000 f85f 	bl	8003714 <__swbuf_r>
 8003656:	3001      	adds	r0, #1
 8003658:	d1e8      	bne.n	800362c <_puts_r+0x70>
 800365a:	e7cd      	b.n	80035f8 <_puts_r+0x3c>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	6022      	str	r2, [r4, #0]
 8003662:	220a      	movs	r2, #10
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e7f0      	b.n	800364a <_puts_r+0x8e>

08003668 <puts>:
 8003668:	b510      	push	{r4, lr}
 800366a:	4b03      	ldr	r3, [pc, #12]	@ (8003678 <puts+0x10>)
 800366c:	0001      	movs	r1, r0
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	f7ff ffa4 	bl	80035bc <_puts_r>
 8003674:	bd10      	pop	{r4, pc}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	20000018 	.word	0x20000018

0800367c <__sread>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	000c      	movs	r4, r1
 8003680:	250e      	movs	r5, #14
 8003682:	5f49      	ldrsh	r1, [r1, r5]
 8003684:	f000 f914 	bl	80038b0 <_read_r>
 8003688:	2800      	cmp	r0, #0
 800368a:	db03      	blt.n	8003694 <__sread+0x18>
 800368c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800368e:	181b      	adds	r3, r3, r0
 8003690:	6563      	str	r3, [r4, #84]	@ 0x54
 8003692:	bd70      	pop	{r4, r5, r6, pc}
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	4a02      	ldr	r2, [pc, #8]	@ (80036a0 <__sread+0x24>)
 8003698:	4013      	ands	r3, r2
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	e7f9      	b.n	8003692 <__sread+0x16>
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	ffffefff 	.word	0xffffefff

080036a4 <__swrite>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	001f      	movs	r7, r3
 80036a8:	898b      	ldrh	r3, [r1, #12]
 80036aa:	0005      	movs	r5, r0
 80036ac:	000c      	movs	r4, r1
 80036ae:	0016      	movs	r6, r2
 80036b0:	05db      	lsls	r3, r3, #23
 80036b2:	d505      	bpl.n	80036c0 <__swrite+0x1c>
 80036b4:	230e      	movs	r3, #14
 80036b6:	5ec9      	ldrsh	r1, [r1, r3]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2302      	movs	r3, #2
 80036bc:	f000 f8e4 	bl	8003888 <_lseek_r>
 80036c0:	89a3      	ldrh	r3, [r4, #12]
 80036c2:	4a05      	ldr	r2, [pc, #20]	@ (80036d8 <__swrite+0x34>)
 80036c4:	0028      	movs	r0, r5
 80036c6:	4013      	ands	r3, r2
 80036c8:	81a3      	strh	r3, [r4, #12]
 80036ca:	0032      	movs	r2, r6
 80036cc:	230e      	movs	r3, #14
 80036ce:	5ee1      	ldrsh	r1, [r4, r3]
 80036d0:	003b      	movs	r3, r7
 80036d2:	f000 f901 	bl	80038d8 <_write_r>
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d8:	ffffefff 	.word	0xffffefff

080036dc <__sseek>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	000c      	movs	r4, r1
 80036e0:	250e      	movs	r5, #14
 80036e2:	5f49      	ldrsh	r1, [r1, r5]
 80036e4:	f000 f8d0 	bl	8003888 <_lseek_r>
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	1c42      	adds	r2, r0, #1
 80036ec:	d103      	bne.n	80036f6 <__sseek+0x1a>
 80036ee:	4a05      	ldr	r2, [pc, #20]	@ (8003704 <__sseek+0x28>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
 80036f6:	2280      	movs	r2, #128	@ 0x80
 80036f8:	0152      	lsls	r2, r2, #5
 80036fa:	4313      	orrs	r3, r2
 80036fc:	81a3      	strh	r3, [r4, #12]
 80036fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003700:	e7f8      	b.n	80036f4 <__sseek+0x18>
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	ffffefff 	.word	0xffffefff

08003708 <__sclose>:
 8003708:	b510      	push	{r4, lr}
 800370a:	230e      	movs	r3, #14
 800370c:	5ec9      	ldrsh	r1, [r1, r3]
 800370e:	f000 f8a9 	bl	8003864 <_close_r>
 8003712:	bd10      	pop	{r4, pc}

08003714 <__swbuf_r>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	0006      	movs	r6, r0
 8003718:	000d      	movs	r5, r1
 800371a:	0014      	movs	r4, r2
 800371c:	2800      	cmp	r0, #0
 800371e:	d004      	beq.n	800372a <__swbuf_r+0x16>
 8003720:	6a03      	ldr	r3, [r0, #32]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <__swbuf_r+0x16>
 8003726:	f7ff ff05 	bl	8003534 <__sinit>
 800372a:	69a3      	ldr	r3, [r4, #24]
 800372c:	60a3      	str	r3, [r4, #8]
 800372e:	89a3      	ldrh	r3, [r4, #12]
 8003730:	071b      	lsls	r3, r3, #28
 8003732:	d502      	bpl.n	800373a <__swbuf_r+0x26>
 8003734:	6923      	ldr	r3, [r4, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <__swbuf_r+0x3a>
 800373a:	0021      	movs	r1, r4
 800373c:	0030      	movs	r0, r6
 800373e:	f000 f82b 	bl	8003798 <__swsetup_r>
 8003742:	2800      	cmp	r0, #0
 8003744:	d003      	beq.n	800374e <__swbuf_r+0x3a>
 8003746:	2501      	movs	r5, #1
 8003748:	426d      	negs	r5, r5
 800374a:	0028      	movs	r0, r5
 800374c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800374e:	6923      	ldr	r3, [r4, #16]
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	b2ef      	uxtb	r7, r5
 8003754:	1ac0      	subs	r0, r0, r3
 8003756:	6963      	ldr	r3, [r4, #20]
 8003758:	b2ed      	uxtb	r5, r5
 800375a:	4283      	cmp	r3, r0
 800375c:	dc05      	bgt.n	800376a <__swbuf_r+0x56>
 800375e:	0021      	movs	r1, r4
 8003760:	0030      	movs	r0, r6
 8003762:	f000 fd3d 	bl	80041e0 <_fflush_r>
 8003766:	2800      	cmp	r0, #0
 8003768:	d1ed      	bne.n	8003746 <__swbuf_r+0x32>
 800376a:	68a3      	ldr	r3, [r4, #8]
 800376c:	3001      	adds	r0, #1
 800376e:	3b01      	subs	r3, #1
 8003770:	60a3      	str	r3, [r4, #8]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	6022      	str	r2, [r4, #0]
 8003778:	701f      	strb	r7, [r3, #0]
 800377a:	6963      	ldr	r3, [r4, #20]
 800377c:	4283      	cmp	r3, r0
 800377e:	d004      	beq.n	800378a <__swbuf_r+0x76>
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	07db      	lsls	r3, r3, #31
 8003784:	d5e1      	bpl.n	800374a <__swbuf_r+0x36>
 8003786:	2d0a      	cmp	r5, #10
 8003788:	d1df      	bne.n	800374a <__swbuf_r+0x36>
 800378a:	0021      	movs	r1, r4
 800378c:	0030      	movs	r0, r6
 800378e:	f000 fd27 	bl	80041e0 <_fflush_r>
 8003792:	2800      	cmp	r0, #0
 8003794:	d0d9      	beq.n	800374a <__swbuf_r+0x36>
 8003796:	e7d6      	b.n	8003746 <__swbuf_r+0x32>

08003798 <__swsetup_r>:
 8003798:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <__swsetup_r+0xb8>)
 800379a:	b570      	push	{r4, r5, r6, lr}
 800379c:	0005      	movs	r5, r0
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	000c      	movs	r4, r1
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d004      	beq.n	80037b0 <__swsetup_r+0x18>
 80037a6:	6a03      	ldr	r3, [r0, #32]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <__swsetup_r+0x18>
 80037ac:	f7ff fec2 	bl	8003534 <__sinit>
 80037b0:	220c      	movs	r2, #12
 80037b2:	5ea3      	ldrsh	r3, [r4, r2]
 80037b4:	071a      	lsls	r2, r3, #28
 80037b6:	d423      	bmi.n	8003800 <__swsetup_r+0x68>
 80037b8:	06da      	lsls	r2, r3, #27
 80037ba:	d407      	bmi.n	80037cc <__swsetup_r+0x34>
 80037bc:	2209      	movs	r2, #9
 80037be:	602a      	str	r2, [r5, #0]
 80037c0:	2240      	movs	r2, #64	@ 0x40
 80037c2:	2001      	movs	r0, #1
 80037c4:	4313      	orrs	r3, r2
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	4240      	negs	r0, r0
 80037ca:	e03a      	b.n	8003842 <__swsetup_r+0xaa>
 80037cc:	075b      	lsls	r3, r3, #29
 80037ce:	d513      	bpl.n	80037f8 <__swsetup_r+0x60>
 80037d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037d2:	2900      	cmp	r1, #0
 80037d4:	d008      	beq.n	80037e8 <__swsetup_r+0x50>
 80037d6:	0023      	movs	r3, r4
 80037d8:	3344      	adds	r3, #68	@ 0x44
 80037da:	4299      	cmp	r1, r3
 80037dc:	d002      	beq.n	80037e4 <__swsetup_r+0x4c>
 80037de:	0028      	movs	r0, r5
 80037e0:	f000 f8bc 	bl	800395c <_free_r>
 80037e4:	2300      	movs	r3, #0
 80037e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80037e8:	2224      	movs	r2, #36	@ 0x24
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	4393      	bics	r3, r2
 80037ee:	81a3      	strh	r3, [r4, #12]
 80037f0:	2300      	movs	r3, #0
 80037f2:	6063      	str	r3, [r4, #4]
 80037f4:	6923      	ldr	r3, [r4, #16]
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	2308      	movs	r3, #8
 80037fa:	89a2      	ldrh	r2, [r4, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	6923      	ldr	r3, [r4, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <__swsetup_r+0x86>
 8003806:	21a0      	movs	r1, #160	@ 0xa0
 8003808:	2280      	movs	r2, #128	@ 0x80
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	0089      	lsls	r1, r1, #2
 800380e:	0092      	lsls	r2, r2, #2
 8003810:	400b      	ands	r3, r1
 8003812:	4293      	cmp	r3, r2
 8003814:	d003      	beq.n	800381e <__swsetup_r+0x86>
 8003816:	0021      	movs	r1, r4
 8003818:	0028      	movs	r0, r5
 800381a:	f000 fd37 	bl	800428c <__smakebuf_r>
 800381e:	220c      	movs	r2, #12
 8003820:	5ea3      	ldrsh	r3, [r4, r2]
 8003822:	2101      	movs	r1, #1
 8003824:	001a      	movs	r2, r3
 8003826:	400a      	ands	r2, r1
 8003828:	420b      	tst	r3, r1
 800382a:	d00b      	beq.n	8003844 <__swsetup_r+0xac>
 800382c:	2200      	movs	r2, #0
 800382e:	60a2      	str	r2, [r4, #8]
 8003830:	6962      	ldr	r2, [r4, #20]
 8003832:	4252      	negs	r2, r2
 8003834:	61a2      	str	r2, [r4, #24]
 8003836:	2000      	movs	r0, #0
 8003838:	6922      	ldr	r2, [r4, #16]
 800383a:	4282      	cmp	r2, r0
 800383c:	d101      	bne.n	8003842 <__swsetup_r+0xaa>
 800383e:	061a      	lsls	r2, r3, #24
 8003840:	d4be      	bmi.n	80037c0 <__swsetup_r+0x28>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	0799      	lsls	r1, r3, #30
 8003846:	d400      	bmi.n	800384a <__swsetup_r+0xb2>
 8003848:	6962      	ldr	r2, [r4, #20]
 800384a:	60a2      	str	r2, [r4, #8]
 800384c:	e7f3      	b.n	8003836 <__swsetup_r+0x9e>
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	20000018 	.word	0x20000018

08003854 <memset>:
 8003854:	0003      	movs	r3, r0
 8003856:	1882      	adds	r2, r0, r2
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	7019      	strb	r1, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <_close_r>:
 8003864:	2300      	movs	r3, #0
 8003866:	b570      	push	{r4, r5, r6, lr}
 8003868:	4d06      	ldr	r5, [pc, #24]	@ (8003884 <_close_r+0x20>)
 800386a:	0004      	movs	r4, r0
 800386c:	0008      	movs	r0, r1
 800386e:	602b      	str	r3, [r5, #0]
 8003870:	f7fc ff5b 	bl	800072a <_close>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d103      	bne.n	8003880 <_close_r+0x1c>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d000      	beq.n	8003880 <_close_r+0x1c>
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	bd70      	pop	{r4, r5, r6, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	200002dc 	.word	0x200002dc

08003888 <_lseek_r>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	0004      	movs	r4, r0
 800388c:	0008      	movs	r0, r1
 800388e:	0011      	movs	r1, r2
 8003890:	001a      	movs	r2, r3
 8003892:	2300      	movs	r3, #0
 8003894:	4d05      	ldr	r5, [pc, #20]	@ (80038ac <_lseek_r+0x24>)
 8003896:	602b      	str	r3, [r5, #0]
 8003898:	f7fc ff68 	bl	800076c <_lseek>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d103      	bne.n	80038a8 <_lseek_r+0x20>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d000      	beq.n	80038a8 <_lseek_r+0x20>
 80038a6:	6023      	str	r3, [r4, #0]
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	200002dc 	.word	0x200002dc

080038b0 <_read_r>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	0004      	movs	r4, r0
 80038b4:	0008      	movs	r0, r1
 80038b6:	0011      	movs	r1, r2
 80038b8:	001a      	movs	r2, r3
 80038ba:	2300      	movs	r3, #0
 80038bc:	4d05      	ldr	r5, [pc, #20]	@ (80038d4 <_read_r+0x24>)
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	f7fc ff16 	bl	80006f0 <_read>
 80038c4:	1c43      	adds	r3, r0, #1
 80038c6:	d103      	bne.n	80038d0 <_read_r+0x20>
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d000      	beq.n	80038d0 <_read_r+0x20>
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	200002dc 	.word	0x200002dc

080038d8 <_write_r>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	0004      	movs	r4, r0
 80038dc:	0008      	movs	r0, r1
 80038de:	0011      	movs	r1, r2
 80038e0:	001a      	movs	r2, r3
 80038e2:	2300      	movs	r3, #0
 80038e4:	4d05      	ldr	r5, [pc, #20]	@ (80038fc <_write_r+0x24>)
 80038e6:	602b      	str	r3, [r5, #0]
 80038e8:	f7fc fdb6 	bl	8000458 <_write>
 80038ec:	1c43      	adds	r3, r0, #1
 80038ee:	d103      	bne.n	80038f8 <_write_r+0x20>
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d000      	beq.n	80038f8 <_write_r+0x20>
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	bd70      	pop	{r4, r5, r6, pc}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	200002dc 	.word	0x200002dc

08003900 <__errno>:
 8003900:	4b01      	ldr	r3, [pc, #4]	@ (8003908 <__errno+0x8>)
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	4770      	bx	lr
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	20000018 	.word	0x20000018

0800390c <__libc_init_array>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	2600      	movs	r6, #0
 8003910:	4c0c      	ldr	r4, [pc, #48]	@ (8003944 <__libc_init_array+0x38>)
 8003912:	4d0d      	ldr	r5, [pc, #52]	@ (8003948 <__libc_init_array+0x3c>)
 8003914:	1b64      	subs	r4, r4, r5
 8003916:	10a4      	asrs	r4, r4, #2
 8003918:	42a6      	cmp	r6, r4
 800391a:	d109      	bne.n	8003930 <__libc_init_array+0x24>
 800391c:	2600      	movs	r6, #0
 800391e:	f000 fd39 	bl	8004394 <_init>
 8003922:	4c0a      	ldr	r4, [pc, #40]	@ (800394c <__libc_init_array+0x40>)
 8003924:	4d0a      	ldr	r5, [pc, #40]	@ (8003950 <__libc_init_array+0x44>)
 8003926:	1b64      	subs	r4, r4, r5
 8003928:	10a4      	asrs	r4, r4, #2
 800392a:	42a6      	cmp	r6, r4
 800392c:	d105      	bne.n	800393a <__libc_init_array+0x2e>
 800392e:	bd70      	pop	{r4, r5, r6, pc}
 8003930:	00b3      	lsls	r3, r6, #2
 8003932:	58eb      	ldr	r3, [r5, r3]
 8003934:	4798      	blx	r3
 8003936:	3601      	adds	r6, #1
 8003938:	e7ee      	b.n	8003918 <__libc_init_array+0xc>
 800393a:	00b3      	lsls	r3, r6, #2
 800393c:	58eb      	ldr	r3, [r5, r3]
 800393e:	4798      	blx	r3
 8003940:	3601      	adds	r6, #1
 8003942:	e7f2      	b.n	800392a <__libc_init_array+0x1e>
 8003944:	0800444c 	.word	0x0800444c
 8003948:	0800444c 	.word	0x0800444c
 800394c:	08004450 	.word	0x08004450
 8003950:	0800444c 	.word	0x0800444c

08003954 <__retarget_lock_init_recursive>:
 8003954:	4770      	bx	lr

08003956 <__retarget_lock_acquire_recursive>:
 8003956:	4770      	bx	lr

08003958 <__retarget_lock_release_recursive>:
 8003958:	4770      	bx	lr
	...

0800395c <_free_r>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	0005      	movs	r5, r0
 8003960:	1e0c      	subs	r4, r1, #0
 8003962:	d010      	beq.n	8003986 <_free_r+0x2a>
 8003964:	3c04      	subs	r4, #4
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	da00      	bge.n	800396e <_free_r+0x12>
 800396c:	18e4      	adds	r4, r4, r3
 800396e:	0028      	movs	r0, r5
 8003970:	f000 f8e0 	bl	8003b34 <__malloc_lock>
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <_free_r+0x90>)
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <_free_r+0x2c>
 800397c:	6063      	str	r3, [r4, #4]
 800397e:	6014      	str	r4, [r2, #0]
 8003980:	0028      	movs	r0, r5
 8003982:	f000 f8df 	bl	8003b44 <__malloc_unlock>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	42a3      	cmp	r3, r4
 800398a:	d908      	bls.n	800399e <_free_r+0x42>
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	1821      	adds	r1, r4, r0
 8003990:	428b      	cmp	r3, r1
 8003992:	d1f3      	bne.n	800397c <_free_r+0x20>
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	1809      	adds	r1, r1, r0
 800399a:	6021      	str	r1, [r4, #0]
 800399c:	e7ee      	b.n	800397c <_free_r+0x20>
 800399e:	001a      	movs	r2, r3
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <_free_r+0x4e>
 80039a6:	42a3      	cmp	r3, r4
 80039a8:	d9f9      	bls.n	800399e <_free_r+0x42>
 80039aa:	6811      	ldr	r1, [r2, #0]
 80039ac:	1850      	adds	r0, r2, r1
 80039ae:	42a0      	cmp	r0, r4
 80039b0:	d10b      	bne.n	80039ca <_free_r+0x6e>
 80039b2:	6820      	ldr	r0, [r4, #0]
 80039b4:	1809      	adds	r1, r1, r0
 80039b6:	1850      	adds	r0, r2, r1
 80039b8:	6011      	str	r1, [r2, #0]
 80039ba:	4283      	cmp	r3, r0
 80039bc:	d1e0      	bne.n	8003980 <_free_r+0x24>
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	1841      	adds	r1, r0, r1
 80039c4:	6011      	str	r1, [r2, #0]
 80039c6:	6053      	str	r3, [r2, #4]
 80039c8:	e7da      	b.n	8003980 <_free_r+0x24>
 80039ca:	42a0      	cmp	r0, r4
 80039cc:	d902      	bls.n	80039d4 <_free_r+0x78>
 80039ce:	230c      	movs	r3, #12
 80039d0:	602b      	str	r3, [r5, #0]
 80039d2:	e7d5      	b.n	8003980 <_free_r+0x24>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	1821      	adds	r1, r4, r0
 80039d8:	428b      	cmp	r3, r1
 80039da:	d103      	bne.n	80039e4 <_free_r+0x88>
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	1809      	adds	r1, r1, r0
 80039e2:	6021      	str	r1, [r4, #0]
 80039e4:	6063      	str	r3, [r4, #4]
 80039e6:	6054      	str	r4, [r2, #4]
 80039e8:	e7ca      	b.n	8003980 <_free_r+0x24>
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	200002e8 	.word	0x200002e8

080039f0 <sbrk_aligned>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a30 <sbrk_aligned+0x40>)
 80039f4:	000d      	movs	r5, r1
 80039f6:	6831      	ldr	r1, [r6, #0]
 80039f8:	0004      	movs	r4, r0
 80039fa:	2900      	cmp	r1, #0
 80039fc:	d102      	bne.n	8003a04 <sbrk_aligned+0x14>
 80039fe:	f000 fcab 	bl	8004358 <_sbrk_r>
 8003a02:	6030      	str	r0, [r6, #0]
 8003a04:	0029      	movs	r1, r5
 8003a06:	0020      	movs	r0, r4
 8003a08:	f000 fca6 	bl	8004358 <_sbrk_r>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d103      	bne.n	8003a18 <sbrk_aligned+0x28>
 8003a10:	2501      	movs	r5, #1
 8003a12:	426d      	negs	r5, r5
 8003a14:	0028      	movs	r0, r5
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	2303      	movs	r3, #3
 8003a1a:	1cc5      	adds	r5, r0, #3
 8003a1c:	439d      	bics	r5, r3
 8003a1e:	42a8      	cmp	r0, r5
 8003a20:	d0f8      	beq.n	8003a14 <sbrk_aligned+0x24>
 8003a22:	1a29      	subs	r1, r5, r0
 8003a24:	0020      	movs	r0, r4
 8003a26:	f000 fc97 	bl	8004358 <_sbrk_r>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d1f2      	bne.n	8003a14 <sbrk_aligned+0x24>
 8003a2e:	e7ef      	b.n	8003a10 <sbrk_aligned+0x20>
 8003a30:	200002e4 	.word	0x200002e4

08003a34 <_malloc_r>:
 8003a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a36:	2203      	movs	r2, #3
 8003a38:	1ccb      	adds	r3, r1, #3
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	0005      	movs	r5, r0
 8003a40:	001f      	movs	r7, r3
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d234      	bcs.n	8003ab0 <_malloc_r+0x7c>
 8003a46:	270c      	movs	r7, #12
 8003a48:	42b9      	cmp	r1, r7
 8003a4a:	d833      	bhi.n	8003ab4 <_malloc_r+0x80>
 8003a4c:	0028      	movs	r0, r5
 8003a4e:	f000 f871 	bl	8003b34 <__malloc_lock>
 8003a52:	4e37      	ldr	r6, [pc, #220]	@ (8003b30 <_malloc_r+0xfc>)
 8003a54:	6833      	ldr	r3, [r6, #0]
 8003a56:	001c      	movs	r4, r3
 8003a58:	2c00      	cmp	r4, #0
 8003a5a:	d12f      	bne.n	8003abc <_malloc_r+0x88>
 8003a5c:	0039      	movs	r1, r7
 8003a5e:	0028      	movs	r0, r5
 8003a60:	f7ff ffc6 	bl	80039f0 <sbrk_aligned>
 8003a64:	0004      	movs	r4, r0
 8003a66:	1c43      	adds	r3, r0, #1
 8003a68:	d15f      	bne.n	8003b2a <_malloc_r+0xf6>
 8003a6a:	6834      	ldr	r4, [r6, #0]
 8003a6c:	9400      	str	r4, [sp, #0]
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d14a      	bne.n	8003b0a <_malloc_r+0xd6>
 8003a74:	2c00      	cmp	r4, #0
 8003a76:	d052      	beq.n	8003b1e <_malloc_r+0xea>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	0028      	movs	r0, r5
 8003a7c:	18e3      	adds	r3, r4, r3
 8003a7e:	9900      	ldr	r1, [sp, #0]
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	f000 fc69 	bl	8004358 <_sbrk_r>
 8003a86:	9b01      	ldr	r3, [sp, #4]
 8003a88:	4283      	cmp	r3, r0
 8003a8a:	d148      	bne.n	8003b1e <_malloc_r+0xea>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	0028      	movs	r0, r5
 8003a90:	1aff      	subs	r7, r7, r3
 8003a92:	0039      	movs	r1, r7
 8003a94:	f7ff ffac 	bl	80039f0 <sbrk_aligned>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d040      	beq.n	8003b1e <_malloc_r+0xea>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	19db      	adds	r3, r3, r7
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	6833      	ldr	r3, [r6, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	2a00      	cmp	r2, #0
 8003aa8:	d133      	bne.n	8003b12 <_malloc_r+0xde>
 8003aaa:	9b00      	ldr	r3, [sp, #0]
 8003aac:	6033      	str	r3, [r6, #0]
 8003aae:	e019      	b.n	8003ae4 <_malloc_r+0xb0>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	dac9      	bge.n	8003a48 <_malloc_r+0x14>
 8003ab4:	230c      	movs	r3, #12
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	2000      	movs	r0, #0
 8003aba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003abc:	6821      	ldr	r1, [r4, #0]
 8003abe:	1bc9      	subs	r1, r1, r7
 8003ac0:	d420      	bmi.n	8003b04 <_malloc_r+0xd0>
 8003ac2:	290b      	cmp	r1, #11
 8003ac4:	d90a      	bls.n	8003adc <_malloc_r+0xa8>
 8003ac6:	19e2      	adds	r2, r4, r7
 8003ac8:	6027      	str	r7, [r4, #0]
 8003aca:	42a3      	cmp	r3, r4
 8003acc:	d104      	bne.n	8003ad8 <_malloc_r+0xa4>
 8003ace:	6032      	str	r2, [r6, #0]
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	6011      	str	r1, [r2, #0]
 8003ad4:	6053      	str	r3, [r2, #4]
 8003ad6:	e005      	b.n	8003ae4 <_malloc_r+0xb0>
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	e7f9      	b.n	8003ad0 <_malloc_r+0x9c>
 8003adc:	6862      	ldr	r2, [r4, #4]
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	d10e      	bne.n	8003b00 <_malloc_r+0xcc>
 8003ae2:	6032      	str	r2, [r6, #0]
 8003ae4:	0028      	movs	r0, r5
 8003ae6:	f000 f82d 	bl	8003b44 <__malloc_unlock>
 8003aea:	0020      	movs	r0, r4
 8003aec:	2207      	movs	r2, #7
 8003aee:	300b      	adds	r0, #11
 8003af0:	1d23      	adds	r3, r4, #4
 8003af2:	4390      	bics	r0, r2
 8003af4:	1ac2      	subs	r2, r0, r3
 8003af6:	4298      	cmp	r0, r3
 8003af8:	d0df      	beq.n	8003aba <_malloc_r+0x86>
 8003afa:	1a1b      	subs	r3, r3, r0
 8003afc:	50a3      	str	r3, [r4, r2]
 8003afe:	e7dc      	b.n	8003aba <_malloc_r+0x86>
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	e7ef      	b.n	8003ae4 <_malloc_r+0xb0>
 8003b04:	0023      	movs	r3, r4
 8003b06:	6864      	ldr	r4, [r4, #4]
 8003b08:	e7a6      	b.n	8003a58 <_malloc_r+0x24>
 8003b0a:	9c00      	ldr	r4, [sp, #0]
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	e7ad      	b.n	8003a6e <_malloc_r+0x3a>
 8003b12:	001a      	movs	r2, r3
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	d1fb      	bne.n	8003b12 <_malloc_r+0xde>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e7da      	b.n	8003ad4 <_malloc_r+0xa0>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	0028      	movs	r0, r5
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	f000 f80e 	bl	8003b44 <__malloc_unlock>
 8003b28:	e7c6      	b.n	8003ab8 <_malloc_r+0x84>
 8003b2a:	6007      	str	r7, [r0, #0]
 8003b2c:	e7da      	b.n	8003ae4 <_malloc_r+0xb0>
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	200002e8 	.word	0x200002e8

08003b34 <__malloc_lock>:
 8003b34:	b510      	push	{r4, lr}
 8003b36:	4802      	ldr	r0, [pc, #8]	@ (8003b40 <__malloc_lock+0xc>)
 8003b38:	f7ff ff0d 	bl	8003956 <__retarget_lock_acquire_recursive>
 8003b3c:	bd10      	pop	{r4, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	200002e0 	.word	0x200002e0

08003b44 <__malloc_unlock>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	4802      	ldr	r0, [pc, #8]	@ (8003b50 <__malloc_unlock+0xc>)
 8003b48:	f7ff ff06 	bl	8003958 <__retarget_lock_release_recursive>
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	200002e0 	.word	0x200002e0

08003b54 <__sfputc_r>:
 8003b54:	6893      	ldr	r3, [r2, #8]
 8003b56:	b510      	push	{r4, lr}
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	6093      	str	r3, [r2, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	da04      	bge.n	8003b6a <__sfputc_r+0x16>
 8003b60:	6994      	ldr	r4, [r2, #24]
 8003b62:	42a3      	cmp	r3, r4
 8003b64:	db07      	blt.n	8003b76 <__sfputc_r+0x22>
 8003b66:	290a      	cmp	r1, #10
 8003b68:	d005      	beq.n	8003b76 <__sfputc_r+0x22>
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	1c58      	adds	r0, r3, #1
 8003b6e:	6010      	str	r0, [r2, #0]
 8003b70:	7019      	strb	r1, [r3, #0]
 8003b72:	0008      	movs	r0, r1
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	f7ff fdcd 	bl	8003714 <__swbuf_r>
 8003b7a:	0001      	movs	r1, r0
 8003b7c:	e7f9      	b.n	8003b72 <__sfputc_r+0x1e>

08003b7e <__sfputs_r>:
 8003b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b80:	0006      	movs	r6, r0
 8003b82:	000f      	movs	r7, r1
 8003b84:	0014      	movs	r4, r2
 8003b86:	18d5      	adds	r5, r2, r3
 8003b88:	42ac      	cmp	r4, r5
 8003b8a:	d101      	bne.n	8003b90 <__sfputs_r+0x12>
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	e007      	b.n	8003ba0 <__sfputs_r+0x22>
 8003b90:	7821      	ldrb	r1, [r4, #0]
 8003b92:	003a      	movs	r2, r7
 8003b94:	0030      	movs	r0, r6
 8003b96:	f7ff ffdd 	bl	8003b54 <__sfputc_r>
 8003b9a:	3401      	adds	r4, #1
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d1f3      	bne.n	8003b88 <__sfputs_r+0xa>
 8003ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ba4 <_vfiprintf_r>:
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	b0a1      	sub	sp, #132	@ 0x84
 8003ba8:	000f      	movs	r7, r1
 8003baa:	0015      	movs	r5, r2
 8003bac:	001e      	movs	r6, r3
 8003bae:	9003      	str	r0, [sp, #12]
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d004      	beq.n	8003bbe <_vfiprintf_r+0x1a>
 8003bb4:	6a03      	ldr	r3, [r0, #32]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <_vfiprintf_r+0x1a>
 8003bba:	f7ff fcbb 	bl	8003534 <__sinit>
 8003bbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bc0:	07db      	lsls	r3, r3, #31
 8003bc2:	d405      	bmi.n	8003bd0 <_vfiprintf_r+0x2c>
 8003bc4:	89bb      	ldrh	r3, [r7, #12]
 8003bc6:	059b      	lsls	r3, r3, #22
 8003bc8:	d402      	bmi.n	8003bd0 <_vfiprintf_r+0x2c>
 8003bca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003bcc:	f7ff fec3 	bl	8003956 <__retarget_lock_acquire_recursive>
 8003bd0:	89bb      	ldrh	r3, [r7, #12]
 8003bd2:	071b      	lsls	r3, r3, #28
 8003bd4:	d502      	bpl.n	8003bdc <_vfiprintf_r+0x38>
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d113      	bne.n	8003c04 <_vfiprintf_r+0x60>
 8003bdc:	0039      	movs	r1, r7
 8003bde:	9803      	ldr	r0, [sp, #12]
 8003be0:	f7ff fdda 	bl	8003798 <__swsetup_r>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d00d      	beq.n	8003c04 <_vfiprintf_r+0x60>
 8003be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bea:	07db      	lsls	r3, r3, #31
 8003bec:	d503      	bpl.n	8003bf6 <_vfiprintf_r+0x52>
 8003bee:	2001      	movs	r0, #1
 8003bf0:	4240      	negs	r0, r0
 8003bf2:	b021      	add	sp, #132	@ 0x84
 8003bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf6:	89bb      	ldrh	r3, [r7, #12]
 8003bf8:	059b      	lsls	r3, r3, #22
 8003bfa:	d4f8      	bmi.n	8003bee <_vfiprintf_r+0x4a>
 8003bfc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003bfe:	f7ff feab 	bl	8003958 <__retarget_lock_release_recursive>
 8003c02:	e7f4      	b.n	8003bee <_vfiprintf_r+0x4a>
 8003c04:	2300      	movs	r3, #0
 8003c06:	ac08      	add	r4, sp, #32
 8003c08:	6163      	str	r3, [r4, #20]
 8003c0a:	3320      	adds	r3, #32
 8003c0c:	7663      	strb	r3, [r4, #25]
 8003c0e:	3310      	adds	r3, #16
 8003c10:	76a3      	strb	r3, [r4, #26]
 8003c12:	9607      	str	r6, [sp, #28]
 8003c14:	002e      	movs	r6, r5
 8003c16:	7833      	ldrb	r3, [r6, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <_vfiprintf_r+0x7c>
 8003c1c:	2b25      	cmp	r3, #37	@ 0x25
 8003c1e:	d148      	bne.n	8003cb2 <_vfiprintf_r+0x10e>
 8003c20:	1b73      	subs	r3, r6, r5
 8003c22:	9305      	str	r3, [sp, #20]
 8003c24:	42ae      	cmp	r6, r5
 8003c26:	d00b      	beq.n	8003c40 <_vfiprintf_r+0x9c>
 8003c28:	002a      	movs	r2, r5
 8003c2a:	0039      	movs	r1, r7
 8003c2c:	9803      	ldr	r0, [sp, #12]
 8003c2e:	f7ff ffa6 	bl	8003b7e <__sfputs_r>
 8003c32:	3001      	adds	r0, #1
 8003c34:	d100      	bne.n	8003c38 <_vfiprintf_r+0x94>
 8003c36:	e0ae      	b.n	8003d96 <_vfiprintf_r+0x1f2>
 8003c38:	6963      	ldr	r3, [r4, #20]
 8003c3a:	9a05      	ldr	r2, [sp, #20]
 8003c3c:	189b      	adds	r3, r3, r2
 8003c3e:	6163      	str	r3, [r4, #20]
 8003c40:	7833      	ldrb	r3, [r6, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d100      	bne.n	8003c48 <_vfiprintf_r+0xa4>
 8003c46:	e0a6      	b.n	8003d96 <_vfiprintf_r+0x1f2>
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4252      	negs	r2, r2
 8003c4e:	6062      	str	r2, [r4, #4]
 8003c50:	a904      	add	r1, sp, #16
 8003c52:	3254      	adds	r2, #84	@ 0x54
 8003c54:	1852      	adds	r2, r2, r1
 8003c56:	1c75      	adds	r5, r6, #1
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	60e3      	str	r3, [r4, #12]
 8003c5c:	60a3      	str	r3, [r4, #8]
 8003c5e:	7013      	strb	r3, [r2, #0]
 8003c60:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003c62:	4b59      	ldr	r3, [pc, #356]	@ (8003dc8 <_vfiprintf_r+0x224>)
 8003c64:	2205      	movs	r2, #5
 8003c66:	0018      	movs	r0, r3
 8003c68:	7829      	ldrb	r1, [r5, #0]
 8003c6a:	9305      	str	r3, [sp, #20]
 8003c6c:	f000 fb86 	bl	800437c <memchr>
 8003c70:	1c6e      	adds	r6, r5, #1
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d11f      	bne.n	8003cb6 <_vfiprintf_r+0x112>
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	06d3      	lsls	r3, r2, #27
 8003c7a:	d504      	bpl.n	8003c86 <_vfiprintf_r+0xe2>
 8003c7c:	2353      	movs	r3, #83	@ 0x53
 8003c7e:	a904      	add	r1, sp, #16
 8003c80:	185b      	adds	r3, r3, r1
 8003c82:	2120      	movs	r1, #32
 8003c84:	7019      	strb	r1, [r3, #0]
 8003c86:	0713      	lsls	r3, r2, #28
 8003c88:	d504      	bpl.n	8003c94 <_vfiprintf_r+0xf0>
 8003c8a:	2353      	movs	r3, #83	@ 0x53
 8003c8c:	a904      	add	r1, sp, #16
 8003c8e:	185b      	adds	r3, r3, r1
 8003c90:	212b      	movs	r1, #43	@ 0x2b
 8003c92:	7019      	strb	r1, [r3, #0]
 8003c94:	782b      	ldrb	r3, [r5, #0]
 8003c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c98:	d016      	beq.n	8003cc8 <_vfiprintf_r+0x124>
 8003c9a:	002e      	movs	r6, r5
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	200a      	movs	r0, #10
 8003ca0:	68e3      	ldr	r3, [r4, #12]
 8003ca2:	7832      	ldrb	r2, [r6, #0]
 8003ca4:	1c75      	adds	r5, r6, #1
 8003ca6:	3a30      	subs	r2, #48	@ 0x30
 8003ca8:	2a09      	cmp	r2, #9
 8003caa:	d950      	bls.n	8003d4e <_vfiprintf_r+0x1aa>
 8003cac:	2900      	cmp	r1, #0
 8003cae:	d111      	bne.n	8003cd4 <_vfiprintf_r+0x130>
 8003cb0:	e017      	b.n	8003ce2 <_vfiprintf_r+0x13e>
 8003cb2:	3601      	adds	r6, #1
 8003cb4:	e7af      	b.n	8003c16 <_vfiprintf_r+0x72>
 8003cb6:	9b05      	ldr	r3, [sp, #20]
 8003cb8:	6822      	ldr	r2, [r4, #0]
 8003cba:	1ac0      	subs	r0, r0, r3
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4083      	lsls	r3, r0
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	0035      	movs	r5, r6
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	e7cc      	b.n	8003c62 <_vfiprintf_r+0xbe>
 8003cc8:	9b07      	ldr	r3, [sp, #28]
 8003cca:	1d19      	adds	r1, r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	9107      	str	r1, [sp, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	db01      	blt.n	8003cd8 <_vfiprintf_r+0x134>
 8003cd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cd6:	e004      	b.n	8003ce2 <_vfiprintf_r+0x13e>
 8003cd8:	425b      	negs	r3, r3
 8003cda:	60e3      	str	r3, [r4, #12]
 8003cdc:	2302      	movs	r3, #2
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	7833      	ldrb	r3, [r6, #0]
 8003ce4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ce6:	d10c      	bne.n	8003d02 <_vfiprintf_r+0x15e>
 8003ce8:	7873      	ldrb	r3, [r6, #1]
 8003cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cec:	d134      	bne.n	8003d58 <_vfiprintf_r+0x1b4>
 8003cee:	9b07      	ldr	r3, [sp, #28]
 8003cf0:	3602      	adds	r6, #2
 8003cf2:	1d1a      	adds	r2, r3, #4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	9207      	str	r2, [sp, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	da01      	bge.n	8003d00 <_vfiprintf_r+0x15c>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	425b      	negs	r3, r3
 8003d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d02:	4d32      	ldr	r5, [pc, #200]	@ (8003dcc <_vfiprintf_r+0x228>)
 8003d04:	2203      	movs	r2, #3
 8003d06:	0028      	movs	r0, r5
 8003d08:	7831      	ldrb	r1, [r6, #0]
 8003d0a:	f000 fb37 	bl	800437c <memchr>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d006      	beq.n	8003d20 <_vfiprintf_r+0x17c>
 8003d12:	2340      	movs	r3, #64	@ 0x40
 8003d14:	1b40      	subs	r0, r0, r5
 8003d16:	4083      	lsls	r3, r0
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	7831      	ldrb	r1, [r6, #0]
 8003d22:	2206      	movs	r2, #6
 8003d24:	482a      	ldr	r0, [pc, #168]	@ (8003dd0 <_vfiprintf_r+0x22c>)
 8003d26:	1c75      	adds	r5, r6, #1
 8003d28:	7621      	strb	r1, [r4, #24]
 8003d2a:	f000 fb27 	bl	800437c <memchr>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d040      	beq.n	8003db4 <_vfiprintf_r+0x210>
 8003d32:	4b28      	ldr	r3, [pc, #160]	@ (8003dd4 <_vfiprintf_r+0x230>)
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d122      	bne.n	8003d7e <_vfiprintf_r+0x1da>
 8003d38:	2207      	movs	r2, #7
 8003d3a:	9b07      	ldr	r3, [sp, #28]
 8003d3c:	3307      	adds	r3, #7
 8003d3e:	4393      	bics	r3, r2
 8003d40:	3308      	adds	r3, #8
 8003d42:	9307      	str	r3, [sp, #28]
 8003d44:	6963      	ldr	r3, [r4, #20]
 8003d46:	9a04      	ldr	r2, [sp, #16]
 8003d48:	189b      	adds	r3, r3, r2
 8003d4a:	6163      	str	r3, [r4, #20]
 8003d4c:	e762      	b.n	8003c14 <_vfiprintf_r+0x70>
 8003d4e:	4343      	muls	r3, r0
 8003d50:	002e      	movs	r6, r5
 8003d52:	2101      	movs	r1, #1
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	e7a4      	b.n	8003ca2 <_vfiprintf_r+0xfe>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	200a      	movs	r0, #10
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	6063      	str	r3, [r4, #4]
 8003d62:	7832      	ldrb	r2, [r6, #0]
 8003d64:	1c75      	adds	r5, r6, #1
 8003d66:	3a30      	subs	r2, #48	@ 0x30
 8003d68:	2a09      	cmp	r2, #9
 8003d6a:	d903      	bls.n	8003d74 <_vfiprintf_r+0x1d0>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0c8      	beq.n	8003d02 <_vfiprintf_r+0x15e>
 8003d70:	9109      	str	r1, [sp, #36]	@ 0x24
 8003d72:	e7c6      	b.n	8003d02 <_vfiprintf_r+0x15e>
 8003d74:	4341      	muls	r1, r0
 8003d76:	002e      	movs	r6, r5
 8003d78:	2301      	movs	r3, #1
 8003d7a:	1889      	adds	r1, r1, r2
 8003d7c:	e7f1      	b.n	8003d62 <_vfiprintf_r+0x1be>
 8003d7e:	aa07      	add	r2, sp, #28
 8003d80:	9200      	str	r2, [sp, #0]
 8003d82:	0021      	movs	r1, r4
 8003d84:	003a      	movs	r2, r7
 8003d86:	4b14      	ldr	r3, [pc, #80]	@ (8003dd8 <_vfiprintf_r+0x234>)
 8003d88:	9803      	ldr	r0, [sp, #12]
 8003d8a:	e000      	b.n	8003d8e <_vfiprintf_r+0x1ea>
 8003d8c:	bf00      	nop
 8003d8e:	9004      	str	r0, [sp, #16]
 8003d90:	9b04      	ldr	r3, [sp, #16]
 8003d92:	3301      	adds	r3, #1
 8003d94:	d1d6      	bne.n	8003d44 <_vfiprintf_r+0x1a0>
 8003d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d98:	07db      	lsls	r3, r3, #31
 8003d9a:	d405      	bmi.n	8003da8 <_vfiprintf_r+0x204>
 8003d9c:	89bb      	ldrh	r3, [r7, #12]
 8003d9e:	059b      	lsls	r3, r3, #22
 8003da0:	d402      	bmi.n	8003da8 <_vfiprintf_r+0x204>
 8003da2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003da4:	f7ff fdd8 	bl	8003958 <__retarget_lock_release_recursive>
 8003da8:	89bb      	ldrh	r3, [r7, #12]
 8003daa:	065b      	lsls	r3, r3, #25
 8003dac:	d500      	bpl.n	8003db0 <_vfiprintf_r+0x20c>
 8003dae:	e71e      	b.n	8003bee <_vfiprintf_r+0x4a>
 8003db0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003db2:	e71e      	b.n	8003bf2 <_vfiprintf_r+0x4e>
 8003db4:	aa07      	add	r2, sp, #28
 8003db6:	9200      	str	r2, [sp, #0]
 8003db8:	0021      	movs	r1, r4
 8003dba:	003a      	movs	r2, r7
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <_vfiprintf_r+0x234>)
 8003dbe:	9803      	ldr	r0, [sp, #12]
 8003dc0:	f000 f87c 	bl	8003ebc <_printf_i>
 8003dc4:	e7e3      	b.n	8003d8e <_vfiprintf_r+0x1ea>
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	08004418 	.word	0x08004418
 8003dcc:	0800441e 	.word	0x0800441e
 8003dd0:	08004422 	.word	0x08004422
 8003dd4:	00000000 	.word	0x00000000
 8003dd8:	08003b7f 	.word	0x08003b7f

08003ddc <_printf_common>:
 8003ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dde:	0016      	movs	r6, r2
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	688a      	ldr	r2, [r1, #8]
 8003de4:	690b      	ldr	r3, [r1, #16]
 8003de6:	000c      	movs	r4, r1
 8003de8:	9000      	str	r0, [sp, #0]
 8003dea:	4293      	cmp	r3, r2
 8003dec:	da00      	bge.n	8003df0 <_printf_common+0x14>
 8003dee:	0013      	movs	r3, r2
 8003df0:	0022      	movs	r2, r4
 8003df2:	6033      	str	r3, [r6, #0]
 8003df4:	3243      	adds	r2, #67	@ 0x43
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	2a00      	cmp	r2, #0
 8003dfa:	d001      	beq.n	8003e00 <_printf_common+0x24>
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	6033      	str	r3, [r6, #0]
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	069b      	lsls	r3, r3, #26
 8003e04:	d502      	bpl.n	8003e0c <_printf_common+0x30>
 8003e06:	6833      	ldr	r3, [r6, #0]
 8003e08:	3302      	adds	r3, #2
 8003e0a:	6033      	str	r3, [r6, #0]
 8003e0c:	6822      	ldr	r2, [r4, #0]
 8003e0e:	2306      	movs	r3, #6
 8003e10:	0015      	movs	r5, r2
 8003e12:	401d      	ands	r5, r3
 8003e14:	421a      	tst	r2, r3
 8003e16:	d027      	beq.n	8003e68 <_printf_common+0x8c>
 8003e18:	0023      	movs	r3, r4
 8003e1a:	3343      	adds	r3, #67	@ 0x43
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	4193      	sbcs	r3, r2
 8003e22:	6822      	ldr	r2, [r4, #0]
 8003e24:	0692      	lsls	r2, r2, #26
 8003e26:	d430      	bmi.n	8003e8a <_printf_common+0xae>
 8003e28:	0022      	movs	r2, r4
 8003e2a:	9901      	ldr	r1, [sp, #4]
 8003e2c:	9800      	ldr	r0, [sp, #0]
 8003e2e:	9d08      	ldr	r5, [sp, #32]
 8003e30:	3243      	adds	r2, #67	@ 0x43
 8003e32:	47a8      	blx	r5
 8003e34:	3001      	adds	r0, #1
 8003e36:	d025      	beq.n	8003e84 <_printf_common+0xa8>
 8003e38:	2206      	movs	r2, #6
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	2500      	movs	r5, #0
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d105      	bne.n	8003e50 <_printf_common+0x74>
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	68e5      	ldr	r5, [r4, #12]
 8003e48:	1aed      	subs	r5, r5, r3
 8003e4a:	43eb      	mvns	r3, r5
 8003e4c:	17db      	asrs	r3, r3, #31
 8003e4e:	401d      	ands	r5, r3
 8003e50:	68a3      	ldr	r3, [r4, #8]
 8003e52:	6922      	ldr	r2, [r4, #16]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	dd01      	ble.n	8003e5c <_printf_common+0x80>
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	18ed      	adds	r5, r5, r3
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	42b5      	cmp	r5, r6
 8003e60:	d120      	bne.n	8003ea4 <_printf_common+0xc8>
 8003e62:	2000      	movs	r0, #0
 8003e64:	e010      	b.n	8003e88 <_printf_common+0xac>
 8003e66:	3501      	adds	r5, #1
 8003e68:	68e3      	ldr	r3, [r4, #12]
 8003e6a:	6832      	ldr	r2, [r6, #0]
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	42ab      	cmp	r3, r5
 8003e70:	ddd2      	ble.n	8003e18 <_printf_common+0x3c>
 8003e72:	0022      	movs	r2, r4
 8003e74:	2301      	movs	r3, #1
 8003e76:	9901      	ldr	r1, [sp, #4]
 8003e78:	9800      	ldr	r0, [sp, #0]
 8003e7a:	9f08      	ldr	r7, [sp, #32]
 8003e7c:	3219      	adds	r2, #25
 8003e7e:	47b8      	blx	r7
 8003e80:	3001      	adds	r0, #1
 8003e82:	d1f0      	bne.n	8003e66 <_printf_common+0x8a>
 8003e84:	2001      	movs	r0, #1
 8003e86:	4240      	negs	r0, r0
 8003e88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e8a:	2030      	movs	r0, #48	@ 0x30
 8003e8c:	18e1      	adds	r1, r4, r3
 8003e8e:	3143      	adds	r1, #67	@ 0x43
 8003e90:	7008      	strb	r0, [r1, #0]
 8003e92:	0021      	movs	r1, r4
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	3145      	adds	r1, #69	@ 0x45
 8003e98:	7809      	ldrb	r1, [r1, #0]
 8003e9a:	18a2      	adds	r2, r4, r2
 8003e9c:	3243      	adds	r2, #67	@ 0x43
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	7011      	strb	r1, [r2, #0]
 8003ea2:	e7c1      	b.n	8003e28 <_printf_common+0x4c>
 8003ea4:	0022      	movs	r2, r4
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	9901      	ldr	r1, [sp, #4]
 8003eaa:	9800      	ldr	r0, [sp, #0]
 8003eac:	9f08      	ldr	r7, [sp, #32]
 8003eae:	321a      	adds	r2, #26
 8003eb0:	47b8      	blx	r7
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d0e6      	beq.n	8003e84 <_printf_common+0xa8>
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7d1      	b.n	8003e5e <_printf_common+0x82>
	...

08003ebc <_printf_i>:
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	b08b      	sub	sp, #44	@ 0x2c
 8003ec0:	9206      	str	r2, [sp, #24]
 8003ec2:	000a      	movs	r2, r1
 8003ec4:	3243      	adds	r2, #67	@ 0x43
 8003ec6:	9307      	str	r3, [sp, #28]
 8003ec8:	9005      	str	r0, [sp, #20]
 8003eca:	9203      	str	r2, [sp, #12]
 8003ecc:	7e0a      	ldrb	r2, [r1, #24]
 8003ece:	000c      	movs	r4, r1
 8003ed0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003ed2:	2a78      	cmp	r2, #120	@ 0x78
 8003ed4:	d809      	bhi.n	8003eea <_printf_i+0x2e>
 8003ed6:	2a62      	cmp	r2, #98	@ 0x62
 8003ed8:	d80b      	bhi.n	8003ef2 <_printf_i+0x36>
 8003eda:	2a00      	cmp	r2, #0
 8003edc:	d100      	bne.n	8003ee0 <_printf_i+0x24>
 8003ede:	e0ba      	b.n	8004056 <_printf_i+0x19a>
 8003ee0:	497a      	ldr	r1, [pc, #488]	@ (80040cc <_printf_i+0x210>)
 8003ee2:	9104      	str	r1, [sp, #16]
 8003ee4:	2a58      	cmp	r2, #88	@ 0x58
 8003ee6:	d100      	bne.n	8003eea <_printf_i+0x2e>
 8003ee8:	e08e      	b.n	8004008 <_printf_i+0x14c>
 8003eea:	0025      	movs	r5, r4
 8003eec:	3542      	adds	r5, #66	@ 0x42
 8003eee:	702a      	strb	r2, [r5, #0]
 8003ef0:	e022      	b.n	8003f38 <_printf_i+0x7c>
 8003ef2:	0010      	movs	r0, r2
 8003ef4:	3863      	subs	r0, #99	@ 0x63
 8003ef6:	2815      	cmp	r0, #21
 8003ef8:	d8f7      	bhi.n	8003eea <_printf_i+0x2e>
 8003efa:	f7fc f905 	bl	8000108 <__gnu_thumb1_case_shi>
 8003efe:	0016      	.short	0x0016
 8003f00:	fff6001f 	.word	0xfff6001f
 8003f04:	fff6fff6 	.word	0xfff6fff6
 8003f08:	001ffff6 	.word	0x001ffff6
 8003f0c:	fff6fff6 	.word	0xfff6fff6
 8003f10:	fff6fff6 	.word	0xfff6fff6
 8003f14:	0036009f 	.word	0x0036009f
 8003f18:	fff6007e 	.word	0xfff6007e
 8003f1c:	00b0fff6 	.word	0x00b0fff6
 8003f20:	0036fff6 	.word	0x0036fff6
 8003f24:	fff6fff6 	.word	0xfff6fff6
 8003f28:	0082      	.short	0x0082
 8003f2a:	0025      	movs	r5, r4
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	3542      	adds	r5, #66	@ 0x42
 8003f30:	1d11      	adds	r1, r2, #4
 8003f32:	6019      	str	r1, [r3, #0]
 8003f34:	6813      	ldr	r3, [r2, #0]
 8003f36:	702b      	strb	r3, [r5, #0]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e09e      	b.n	800407a <_printf_i+0x1be>
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	6809      	ldr	r1, [r1, #0]
 8003f40:	1d02      	adds	r2, r0, #4
 8003f42:	060d      	lsls	r5, r1, #24
 8003f44:	d50b      	bpl.n	8003f5e <_printf_i+0xa2>
 8003f46:	6806      	ldr	r6, [r0, #0]
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	2e00      	cmp	r6, #0
 8003f4c:	da03      	bge.n	8003f56 <_printf_i+0x9a>
 8003f4e:	232d      	movs	r3, #45	@ 0x2d
 8003f50:	9a03      	ldr	r2, [sp, #12]
 8003f52:	4276      	negs	r6, r6
 8003f54:	7013      	strb	r3, [r2, #0]
 8003f56:	4b5d      	ldr	r3, [pc, #372]	@ (80040cc <_printf_i+0x210>)
 8003f58:	270a      	movs	r7, #10
 8003f5a:	9304      	str	r3, [sp, #16]
 8003f5c:	e018      	b.n	8003f90 <_printf_i+0xd4>
 8003f5e:	6806      	ldr	r6, [r0, #0]
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	0649      	lsls	r1, r1, #25
 8003f64:	d5f1      	bpl.n	8003f4a <_printf_i+0x8e>
 8003f66:	b236      	sxth	r6, r6
 8003f68:	e7ef      	b.n	8003f4a <_printf_i+0x8e>
 8003f6a:	6808      	ldr	r0, [r1, #0]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	c940      	ldmia	r1!, {r6}
 8003f70:	0605      	lsls	r5, r0, #24
 8003f72:	d402      	bmi.n	8003f7a <_printf_i+0xbe>
 8003f74:	0640      	lsls	r0, r0, #25
 8003f76:	d500      	bpl.n	8003f7a <_printf_i+0xbe>
 8003f78:	b2b6      	uxth	r6, r6
 8003f7a:	6019      	str	r1, [r3, #0]
 8003f7c:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <_printf_i+0x210>)
 8003f7e:	270a      	movs	r7, #10
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	2a6f      	cmp	r2, #111	@ 0x6f
 8003f84:	d100      	bne.n	8003f88 <_printf_i+0xcc>
 8003f86:	3f02      	subs	r7, #2
 8003f88:	0023      	movs	r3, r4
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	3343      	adds	r3, #67	@ 0x43
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	60a3      	str	r3, [r4, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	db06      	blt.n	8003fa6 <_printf_i+0xea>
 8003f98:	2104      	movs	r1, #4
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	9d03      	ldr	r5, [sp, #12]
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	6022      	str	r2, [r4, #0]
 8003fa2:	4333      	orrs	r3, r6
 8003fa4:	d00c      	beq.n	8003fc0 <_printf_i+0x104>
 8003fa6:	9d03      	ldr	r5, [sp, #12]
 8003fa8:	0030      	movs	r0, r6
 8003faa:	0039      	movs	r1, r7
 8003fac:	f7fc f93c 	bl	8000228 <__aeabi_uidivmod>
 8003fb0:	9b04      	ldr	r3, [sp, #16]
 8003fb2:	3d01      	subs	r5, #1
 8003fb4:	5c5b      	ldrb	r3, [r3, r1]
 8003fb6:	702b      	strb	r3, [r5, #0]
 8003fb8:	0033      	movs	r3, r6
 8003fba:	0006      	movs	r6, r0
 8003fbc:	429f      	cmp	r7, r3
 8003fbe:	d9f3      	bls.n	8003fa8 <_printf_i+0xec>
 8003fc0:	2f08      	cmp	r7, #8
 8003fc2:	d109      	bne.n	8003fd8 <_printf_i+0x11c>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	07db      	lsls	r3, r3, #31
 8003fc8:	d506      	bpl.n	8003fd8 <_printf_i+0x11c>
 8003fca:	6862      	ldr	r2, [r4, #4]
 8003fcc:	6923      	ldr	r3, [r4, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	dc02      	bgt.n	8003fd8 <_printf_i+0x11c>
 8003fd2:	2330      	movs	r3, #48	@ 0x30
 8003fd4:	3d01      	subs	r5, #1
 8003fd6:	702b      	strb	r3, [r5, #0]
 8003fd8:	9b03      	ldr	r3, [sp, #12]
 8003fda:	1b5b      	subs	r3, r3, r5
 8003fdc:	6123      	str	r3, [r4, #16]
 8003fde:	9b07      	ldr	r3, [sp, #28]
 8003fe0:	0021      	movs	r1, r4
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	9805      	ldr	r0, [sp, #20]
 8003fe6:	9b06      	ldr	r3, [sp, #24]
 8003fe8:	aa09      	add	r2, sp, #36	@ 0x24
 8003fea:	f7ff fef7 	bl	8003ddc <_printf_common>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d148      	bne.n	8004084 <_printf_i+0x1c8>
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	4240      	negs	r0, r0
 8003ff6:	b00b      	add	sp, #44	@ 0x2c
 8003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	6809      	ldr	r1, [r1, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	6022      	str	r2, [r4, #0]
 8004002:	2278      	movs	r2, #120	@ 0x78
 8004004:	4932      	ldr	r1, [pc, #200]	@ (80040d0 <_printf_i+0x214>)
 8004006:	9104      	str	r1, [sp, #16]
 8004008:	0021      	movs	r1, r4
 800400a:	3145      	adds	r1, #69	@ 0x45
 800400c:	700a      	strb	r2, [r1, #0]
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	c940      	ldmia	r1!, {r6}
 8004014:	0610      	lsls	r0, r2, #24
 8004016:	d402      	bmi.n	800401e <_printf_i+0x162>
 8004018:	0650      	lsls	r0, r2, #25
 800401a:	d500      	bpl.n	800401e <_printf_i+0x162>
 800401c:	b2b6      	uxth	r6, r6
 800401e:	6019      	str	r1, [r3, #0]
 8004020:	07d3      	lsls	r3, r2, #31
 8004022:	d502      	bpl.n	800402a <_printf_i+0x16e>
 8004024:	2320      	movs	r3, #32
 8004026:	4313      	orrs	r3, r2
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	2e00      	cmp	r6, #0
 800402c:	d001      	beq.n	8004032 <_printf_i+0x176>
 800402e:	2710      	movs	r7, #16
 8004030:	e7aa      	b.n	8003f88 <_printf_i+0xcc>
 8004032:	2220      	movs	r2, #32
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	4393      	bics	r3, r2
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	e7f8      	b.n	800402e <_printf_i+0x172>
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	680d      	ldr	r5, [r1, #0]
 8004040:	1d10      	adds	r0, r2, #4
 8004042:	6949      	ldr	r1, [r1, #20]
 8004044:	6018      	str	r0, [r3, #0]
 8004046:	6813      	ldr	r3, [r2, #0]
 8004048:	062e      	lsls	r6, r5, #24
 800404a:	d501      	bpl.n	8004050 <_printf_i+0x194>
 800404c:	6019      	str	r1, [r3, #0]
 800404e:	e002      	b.n	8004056 <_printf_i+0x19a>
 8004050:	066d      	lsls	r5, r5, #25
 8004052:	d5fb      	bpl.n	800404c <_printf_i+0x190>
 8004054:	8019      	strh	r1, [r3, #0]
 8004056:	2300      	movs	r3, #0
 8004058:	9d03      	ldr	r5, [sp, #12]
 800405a:	6123      	str	r3, [r4, #16]
 800405c:	e7bf      	b.n	8003fde <_printf_i+0x122>
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	1d11      	adds	r1, r2, #4
 8004062:	6019      	str	r1, [r3, #0]
 8004064:	6815      	ldr	r5, [r2, #0]
 8004066:	2100      	movs	r1, #0
 8004068:	0028      	movs	r0, r5
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	f000 f986 	bl	800437c <memchr>
 8004070:	2800      	cmp	r0, #0
 8004072:	d001      	beq.n	8004078 <_printf_i+0x1bc>
 8004074:	1b40      	subs	r0, r0, r5
 8004076:	6060      	str	r0, [r4, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	6123      	str	r3, [r4, #16]
 800407c:	2300      	movs	r3, #0
 800407e:	9a03      	ldr	r2, [sp, #12]
 8004080:	7013      	strb	r3, [r2, #0]
 8004082:	e7ac      	b.n	8003fde <_printf_i+0x122>
 8004084:	002a      	movs	r2, r5
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	9906      	ldr	r1, [sp, #24]
 800408a:	9805      	ldr	r0, [sp, #20]
 800408c:	9d07      	ldr	r5, [sp, #28]
 800408e:	47a8      	blx	r5
 8004090:	3001      	adds	r0, #1
 8004092:	d0ae      	beq.n	8003ff2 <_printf_i+0x136>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	079b      	lsls	r3, r3, #30
 8004098:	d415      	bmi.n	80040c6 <_printf_i+0x20a>
 800409a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800409c:	68e0      	ldr	r0, [r4, #12]
 800409e:	4298      	cmp	r0, r3
 80040a0:	daa9      	bge.n	8003ff6 <_printf_i+0x13a>
 80040a2:	0018      	movs	r0, r3
 80040a4:	e7a7      	b.n	8003ff6 <_printf_i+0x13a>
 80040a6:	0022      	movs	r2, r4
 80040a8:	2301      	movs	r3, #1
 80040aa:	9906      	ldr	r1, [sp, #24]
 80040ac:	9805      	ldr	r0, [sp, #20]
 80040ae:	9e07      	ldr	r6, [sp, #28]
 80040b0:	3219      	adds	r2, #25
 80040b2:	47b0      	blx	r6
 80040b4:	3001      	adds	r0, #1
 80040b6:	d09c      	beq.n	8003ff2 <_printf_i+0x136>
 80040b8:	3501      	adds	r5, #1
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	42ab      	cmp	r3, r5
 80040c2:	dcf0      	bgt.n	80040a6 <_printf_i+0x1ea>
 80040c4:	e7e9      	b.n	800409a <_printf_i+0x1de>
 80040c6:	2500      	movs	r5, #0
 80040c8:	e7f7      	b.n	80040ba <_printf_i+0x1fe>
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	08004429 	.word	0x08004429
 80040d0:	0800443a 	.word	0x0800443a

080040d4 <__sflush_r>:
 80040d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040d6:	220c      	movs	r2, #12
 80040d8:	5e8b      	ldrsh	r3, [r1, r2]
 80040da:	0005      	movs	r5, r0
 80040dc:	000c      	movs	r4, r1
 80040de:	071a      	lsls	r2, r3, #28
 80040e0:	d456      	bmi.n	8004190 <__sflush_r+0xbc>
 80040e2:	684a      	ldr	r2, [r1, #4]
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	dc02      	bgt.n	80040ee <__sflush_r+0x1a>
 80040e8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	dd4e      	ble.n	800418c <__sflush_r+0xb8>
 80040ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80040f0:	2f00      	cmp	r7, #0
 80040f2:	d04b      	beq.n	800418c <__sflush_r+0xb8>
 80040f4:	2200      	movs	r2, #0
 80040f6:	2080      	movs	r0, #128	@ 0x80
 80040f8:	682e      	ldr	r6, [r5, #0]
 80040fa:	602a      	str	r2, [r5, #0]
 80040fc:	001a      	movs	r2, r3
 80040fe:	0140      	lsls	r0, r0, #5
 8004100:	6a21      	ldr	r1, [r4, #32]
 8004102:	4002      	ands	r2, r0
 8004104:	4203      	tst	r3, r0
 8004106:	d033      	beq.n	8004170 <__sflush_r+0x9c>
 8004108:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	075b      	lsls	r3, r3, #29
 800410e:	d506      	bpl.n	800411e <__sflush_r+0x4a>
 8004110:	6863      	ldr	r3, [r4, #4]
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <__sflush_r+0x4a>
 800411a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800411c:	1ad2      	subs	r2, r2, r3
 800411e:	2300      	movs	r3, #0
 8004120:	0028      	movs	r0, r5
 8004122:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004124:	6a21      	ldr	r1, [r4, #32]
 8004126:	47b8      	blx	r7
 8004128:	89a2      	ldrh	r2, [r4, #12]
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	d106      	bne.n	800413c <__sflush_r+0x68>
 800412e:	6829      	ldr	r1, [r5, #0]
 8004130:	291d      	cmp	r1, #29
 8004132:	d846      	bhi.n	80041c2 <__sflush_r+0xee>
 8004134:	4b29      	ldr	r3, [pc, #164]	@ (80041dc <__sflush_r+0x108>)
 8004136:	40cb      	lsrs	r3, r1
 8004138:	07db      	lsls	r3, r3, #31
 800413a:	d542      	bpl.n	80041c2 <__sflush_r+0xee>
 800413c:	2300      	movs	r3, #0
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	04d2      	lsls	r2, r2, #19
 8004146:	d505      	bpl.n	8004154 <__sflush_r+0x80>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <__sflush_r+0x7e>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d100      	bne.n	8004154 <__sflush_r+0x80>
 8004152:	6560      	str	r0, [r4, #84]	@ 0x54
 8004154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004156:	602e      	str	r6, [r5, #0]
 8004158:	2900      	cmp	r1, #0
 800415a:	d017      	beq.n	800418c <__sflush_r+0xb8>
 800415c:	0023      	movs	r3, r4
 800415e:	3344      	adds	r3, #68	@ 0x44
 8004160:	4299      	cmp	r1, r3
 8004162:	d002      	beq.n	800416a <__sflush_r+0x96>
 8004164:	0028      	movs	r0, r5
 8004166:	f7ff fbf9 	bl	800395c <_free_r>
 800416a:	2300      	movs	r3, #0
 800416c:	6363      	str	r3, [r4, #52]	@ 0x34
 800416e:	e00d      	b.n	800418c <__sflush_r+0xb8>
 8004170:	2301      	movs	r3, #1
 8004172:	0028      	movs	r0, r5
 8004174:	47b8      	blx	r7
 8004176:	0002      	movs	r2, r0
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d1c6      	bne.n	800410a <__sflush_r+0x36>
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0c3      	beq.n	800410a <__sflush_r+0x36>
 8004182:	2b1d      	cmp	r3, #29
 8004184:	d001      	beq.n	800418a <__sflush_r+0xb6>
 8004186:	2b16      	cmp	r3, #22
 8004188:	d11a      	bne.n	80041c0 <__sflush_r+0xec>
 800418a:	602e      	str	r6, [r5, #0]
 800418c:	2000      	movs	r0, #0
 800418e:	e01e      	b.n	80041ce <__sflush_r+0xfa>
 8004190:	690e      	ldr	r6, [r1, #16]
 8004192:	2e00      	cmp	r6, #0
 8004194:	d0fa      	beq.n	800418c <__sflush_r+0xb8>
 8004196:	680f      	ldr	r7, [r1, #0]
 8004198:	600e      	str	r6, [r1, #0]
 800419a:	1bba      	subs	r2, r7, r6
 800419c:	9201      	str	r2, [sp, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	079b      	lsls	r3, r3, #30
 80041a2:	d100      	bne.n	80041a6 <__sflush_r+0xd2>
 80041a4:	694a      	ldr	r2, [r1, #20]
 80041a6:	60a2      	str	r2, [r4, #8]
 80041a8:	9b01      	ldr	r3, [sp, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	ddee      	ble.n	800418c <__sflush_r+0xb8>
 80041ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80041b0:	0032      	movs	r2, r6
 80041b2:	001f      	movs	r7, r3
 80041b4:	0028      	movs	r0, r5
 80041b6:	9b01      	ldr	r3, [sp, #4]
 80041b8:	6a21      	ldr	r1, [r4, #32]
 80041ba:	47b8      	blx	r7
 80041bc:	2800      	cmp	r0, #0
 80041be:	dc07      	bgt.n	80041d0 <__sflush_r+0xfc>
 80041c0:	89a2      	ldrh	r2, [r4, #12]
 80041c2:	2340      	movs	r3, #64	@ 0x40
 80041c4:	2001      	movs	r0, #1
 80041c6:	4313      	orrs	r3, r2
 80041c8:	b21b      	sxth	r3, r3
 80041ca:	81a3      	strh	r3, [r4, #12]
 80041cc:	4240      	negs	r0, r0
 80041ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	1836      	adds	r6, r6, r0
 80041d4:	1a1b      	subs	r3, r3, r0
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	e7e6      	b.n	80041a8 <__sflush_r+0xd4>
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	20400001 	.word	0x20400001

080041e0 <_fflush_r>:
 80041e0:	690b      	ldr	r3, [r1, #16]
 80041e2:	b570      	push	{r4, r5, r6, lr}
 80041e4:	0005      	movs	r5, r0
 80041e6:	000c      	movs	r4, r1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <_fflush_r+0x12>
 80041ec:	2500      	movs	r5, #0
 80041ee:	0028      	movs	r0, r5
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d004      	beq.n	8004200 <_fflush_r+0x20>
 80041f6:	6a03      	ldr	r3, [r0, #32]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <_fflush_r+0x20>
 80041fc:	f7ff f99a 	bl	8003534 <__sinit>
 8004200:	220c      	movs	r2, #12
 8004202:	5ea3      	ldrsh	r3, [r4, r2]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f1      	beq.n	80041ec <_fflush_r+0xc>
 8004208:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800420a:	07d2      	lsls	r2, r2, #31
 800420c:	d404      	bmi.n	8004218 <_fflush_r+0x38>
 800420e:	059b      	lsls	r3, r3, #22
 8004210:	d402      	bmi.n	8004218 <_fflush_r+0x38>
 8004212:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004214:	f7ff fb9f 	bl	8003956 <__retarget_lock_acquire_recursive>
 8004218:	0028      	movs	r0, r5
 800421a:	0021      	movs	r1, r4
 800421c:	f7ff ff5a 	bl	80040d4 <__sflush_r>
 8004220:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004222:	0005      	movs	r5, r0
 8004224:	07db      	lsls	r3, r3, #31
 8004226:	d4e2      	bmi.n	80041ee <_fflush_r+0xe>
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	059b      	lsls	r3, r3, #22
 800422c:	d4df      	bmi.n	80041ee <_fflush_r+0xe>
 800422e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004230:	f7ff fb92 	bl	8003958 <__retarget_lock_release_recursive>
 8004234:	e7db      	b.n	80041ee <_fflush_r+0xe>
	...

08004238 <__swhatbuf_r>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	000e      	movs	r6, r1
 800423c:	001d      	movs	r5, r3
 800423e:	230e      	movs	r3, #14
 8004240:	5ec9      	ldrsh	r1, [r1, r3]
 8004242:	0014      	movs	r4, r2
 8004244:	b096      	sub	sp, #88	@ 0x58
 8004246:	2900      	cmp	r1, #0
 8004248:	da0c      	bge.n	8004264 <__swhatbuf_r+0x2c>
 800424a:	89b2      	ldrh	r2, [r6, #12]
 800424c:	2380      	movs	r3, #128	@ 0x80
 800424e:	0011      	movs	r1, r2
 8004250:	4019      	ands	r1, r3
 8004252:	421a      	tst	r2, r3
 8004254:	d114      	bne.n	8004280 <__swhatbuf_r+0x48>
 8004256:	2380      	movs	r3, #128	@ 0x80
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	2000      	movs	r0, #0
 800425c:	6029      	str	r1, [r5, #0]
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	b016      	add	sp, #88	@ 0x58
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	466a      	mov	r2, sp
 8004266:	f000 f853 	bl	8004310 <_fstat_r>
 800426a:	2800      	cmp	r0, #0
 800426c:	dbed      	blt.n	800424a <__swhatbuf_r+0x12>
 800426e:	23f0      	movs	r3, #240	@ 0xf0
 8004270:	9901      	ldr	r1, [sp, #4]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	4019      	ands	r1, r3
 8004276:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <__swhatbuf_r+0x50>)
 8004278:	18c9      	adds	r1, r1, r3
 800427a:	424b      	negs	r3, r1
 800427c:	4159      	adcs	r1, r3
 800427e:	e7ea      	b.n	8004256 <__swhatbuf_r+0x1e>
 8004280:	2100      	movs	r1, #0
 8004282:	2340      	movs	r3, #64	@ 0x40
 8004284:	e7e9      	b.n	800425a <__swhatbuf_r+0x22>
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	ffffe000 	.word	0xffffe000

0800428c <__smakebuf_r>:
 800428c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428e:	2602      	movs	r6, #2
 8004290:	898b      	ldrh	r3, [r1, #12]
 8004292:	0005      	movs	r5, r0
 8004294:	000c      	movs	r4, r1
 8004296:	b085      	sub	sp, #20
 8004298:	4233      	tst	r3, r6
 800429a:	d007      	beq.n	80042ac <__smakebuf_r+0x20>
 800429c:	0023      	movs	r3, r4
 800429e:	3347      	adds	r3, #71	@ 0x47
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	2301      	movs	r3, #1
 80042a6:	6163      	str	r3, [r4, #20]
 80042a8:	b005      	add	sp, #20
 80042aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ac:	ab03      	add	r3, sp, #12
 80042ae:	aa02      	add	r2, sp, #8
 80042b0:	f7ff ffc2 	bl	8004238 <__swhatbuf_r>
 80042b4:	9f02      	ldr	r7, [sp, #8]
 80042b6:	9001      	str	r0, [sp, #4]
 80042b8:	0039      	movs	r1, r7
 80042ba:	0028      	movs	r0, r5
 80042bc:	f7ff fbba 	bl	8003a34 <_malloc_r>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d108      	bne.n	80042d6 <__smakebuf_r+0x4a>
 80042c4:	220c      	movs	r2, #12
 80042c6:	5ea3      	ldrsh	r3, [r4, r2]
 80042c8:	059a      	lsls	r2, r3, #22
 80042ca:	d4ed      	bmi.n	80042a8 <__smakebuf_r+0x1c>
 80042cc:	2203      	movs	r2, #3
 80042ce:	4393      	bics	r3, r2
 80042d0:	431e      	orrs	r6, r3
 80042d2:	81a6      	strh	r6, [r4, #12]
 80042d4:	e7e2      	b.n	800429c <__smakebuf_r+0x10>
 80042d6:	2380      	movs	r3, #128	@ 0x80
 80042d8:	89a2      	ldrh	r2, [r4, #12]
 80042da:	6020      	str	r0, [r4, #0]
 80042dc:	4313      	orrs	r3, r2
 80042de:	81a3      	strh	r3, [r4, #12]
 80042e0:	9b03      	ldr	r3, [sp, #12]
 80042e2:	6120      	str	r0, [r4, #16]
 80042e4:	6167      	str	r7, [r4, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00c      	beq.n	8004304 <__smakebuf_r+0x78>
 80042ea:	0028      	movs	r0, r5
 80042ec:	230e      	movs	r3, #14
 80042ee:	5ee1      	ldrsh	r1, [r4, r3]
 80042f0:	f000 f820 	bl	8004334 <_isatty_r>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d005      	beq.n	8004304 <__smakebuf_r+0x78>
 80042f8:	2303      	movs	r3, #3
 80042fa:	89a2      	ldrh	r2, [r4, #12]
 80042fc:	439a      	bics	r2, r3
 80042fe:	3b02      	subs	r3, #2
 8004300:	4313      	orrs	r3, r2
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	9a01      	ldr	r2, [sp, #4]
 8004308:	4313      	orrs	r3, r2
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	e7cc      	b.n	80042a8 <__smakebuf_r+0x1c>
	...

08004310 <_fstat_r>:
 8004310:	2300      	movs	r3, #0
 8004312:	b570      	push	{r4, r5, r6, lr}
 8004314:	4d06      	ldr	r5, [pc, #24]	@ (8004330 <_fstat_r+0x20>)
 8004316:	0004      	movs	r4, r0
 8004318:	0008      	movs	r0, r1
 800431a:	0011      	movs	r1, r2
 800431c:	602b      	str	r3, [r5, #0]
 800431e:	f7fc fa0e 	bl	800073e <_fstat>
 8004322:	1c43      	adds	r3, r0, #1
 8004324:	d103      	bne.n	800432e <_fstat_r+0x1e>
 8004326:	682b      	ldr	r3, [r5, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d000      	beq.n	800432e <_fstat_r+0x1e>
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	200002dc 	.word	0x200002dc

08004334 <_isatty_r>:
 8004334:	2300      	movs	r3, #0
 8004336:	b570      	push	{r4, r5, r6, lr}
 8004338:	4d06      	ldr	r5, [pc, #24]	@ (8004354 <_isatty_r+0x20>)
 800433a:	0004      	movs	r4, r0
 800433c:	0008      	movs	r0, r1
 800433e:	602b      	str	r3, [r5, #0]
 8004340:	f7fc fa0b 	bl	800075a <_isatty>
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	d103      	bne.n	8004350 <_isatty_r+0x1c>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d000      	beq.n	8004350 <_isatty_r+0x1c>
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	bd70      	pop	{r4, r5, r6, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	200002dc 	.word	0x200002dc

08004358 <_sbrk_r>:
 8004358:	2300      	movs	r3, #0
 800435a:	b570      	push	{r4, r5, r6, lr}
 800435c:	4d06      	ldr	r5, [pc, #24]	@ (8004378 <_sbrk_r+0x20>)
 800435e:	0004      	movs	r4, r0
 8004360:	0008      	movs	r0, r1
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	f7fc fa0e 	bl	8000784 <_sbrk>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d103      	bne.n	8004374 <_sbrk_r+0x1c>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d000      	beq.n	8004374 <_sbrk_r+0x1c>
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	bd70      	pop	{r4, r5, r6, pc}
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	200002dc 	.word	0x200002dc

0800437c <memchr>:
 800437c:	b2c9      	uxtb	r1, r1
 800437e:	1882      	adds	r2, r0, r2
 8004380:	4290      	cmp	r0, r2
 8004382:	d101      	bne.n	8004388 <memchr+0xc>
 8004384:	2000      	movs	r0, #0
 8004386:	4770      	bx	lr
 8004388:	7803      	ldrb	r3, [r0, #0]
 800438a:	428b      	cmp	r3, r1
 800438c:	d0fb      	beq.n	8004386 <memchr+0xa>
 800438e:	3001      	adds	r0, #1
 8004390:	e7f6      	b.n	8004380 <memchr+0x4>
	...

08004394 <_init>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr

080043a0 <_fini>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr
